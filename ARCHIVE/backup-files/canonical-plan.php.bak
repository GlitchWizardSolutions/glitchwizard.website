<?php
/*
 * GWS UNIVERSAL HYBRID APP - CSS/JS CLEANUP & STANDARDIZATION PLAN
 * 
 * SYSTEM: Multi-Context Template Application Architecture
 * PURPOSE: Comprehensive plan for consistent styling across ALL application contexts
 * CREATED: August 9, 2025
 * VERSION: 2.0 - Multi-Context Protection Update
 * 
 * CRITICAL SAFETY REQUIREMENT: Zero impact on existing functionality across ALL contexts
 * 
 * This document provides the complete roadmap for cleaning up and standardizing
 * all CSS and JavaScript files across ALL application contexts:
 * 1. Admin Directory (/admin/) - Backend administration interface
 * 2. Accounts System (/accounts_system/) - User authentication and profiles
 * 3. Blog System (/blog_system/) - Content management and display
 * 4. Client Portal (/client_portal/) - Client-facing dashboard
 * 5. Public Website (/) - Main public-facing pages
 * 6. Universal Shared (/private/, /assets/) - Cross-application resources
 * 
 * CROSS-CONTEXT PROTECTION: Ensures no CSS/JS used by one context is deleted by another
 */

// ============================================================================
// SECTION 1: MULTI-CONTEXT STATE ANALYSIS
// ============================================================================

$multi_context_analysis = [
    'admin_context' => [
        'location' => '/public_html/admin/',
        'main_includes' => '/admin/assets/includes/main.php',
        'css_framework' => 'Bootstrap 5.3.3 (CDN)',
        'icon_library' => 'Font Awesome 5.15.4 (CDN)',
        'included_css' => [
            'Bootstrap 5.3.3 CDN' => 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css',
            'Font Awesome 5.15.4' => 'https://use.fontawesome.com/releases/v5.15.4/css/all.css',
            'DataTables BS5' => 'https://cdn.datatables.net/v/bs5/dt-2.1.8/r-3.0.3/datatables.min.css [UNUSED - admin/blog/messages.php deleted, consider removing]',
            'Summernote BS5' => 'https://cdn.jsdelivr.net/npm/summernote@0.9.1/dist/summernote-bs5.min.css',
            'Main Admin CSS' => '/admin/assets/css/admin.css',
            'Dashboard CSS' => '/admin/assets/css/dashboard.css'
        ],
        'included_js' => [
            'jQuery 3.7.1' => 'https://code.jquery.com/jquery-3.7.1.min.js',
            'Bootstrap 5.3.3' => 'https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js',
            'Summernote BS5' => 'https://cdn.jsdelivr.net/npm/summernote@0.9.1/dist/summernote-bs5.min.js',
            'DataTables BS5' => 'https://cdn.datatables.net/v/bs5/dt-2.1.8/r-3.0.3/datatables.min.js [UNUSED - admin/blog/messages.php deleted, consider removing]',
            'Admin Accounts JS' => '/admin/accounts/admin.js',
            'Accessibility Fix' => '/admin/assets/js/accessibility-fix.js'
        ],
        'orphaned_files' => [
            '/admin/assets/css/table-styles.css' => 'Empty file - safe to delete',
            '/admin/assets/css/admin copy.css' => 'Duplicate of admin.css - safe to delete',
            '/admin/assets/css/admin copy 2.css' => 'Duplicate of admin.css - safe to delete'
        ],
        'inline_style_violations' => [
            '/admin/tickets/tickets.php' => 'Inline <style> block with DataTable customizations',
            '/admin/tickets/tickets-view.php' => 'Inline <style> block with form styling',
            '/admin/gallery/gallery.php' => 'Inline <style> block with image grid',
            '/admin/shop/orders.php' => 'Inline <style> block with order status',
            '/admin/shop/products.php' => 'Inline <style> block with product grid',
            '/admin/accounts/roles.php' => 'Inline <style> block with role badges',
            '/admin/admin_tools/notes.php' => 'Inline <style> block with note cards'
        ],
        'orphaned_css' => [
            '/admin/assets/css/table-styles.css' => 'EMPTY FILE - Safe to delete',
            '/admin/assets/css/dashboard-custom-example.css' => 'Example template - Not included anywhere',
            '/admin/accounts/admin copy.css' => 'Duplicate file - Safe to delete',
            '/admin/landing_page_generator/template/assets/css/main copy.css' => 'Duplicate - Safe to delete'
        ],
        'orphaned_js' => [
            '/admin/assets/js/table-actions.js' => 'Not included in main.php - Check if needed',
            '/admin/assets/js/badge-accessibility.js' => 'Not included in main.php - Check if needed',
            '/admin/landing_page_generator/template/assets/js/main.js' => 'Standalone template file'
        ],
        'additional_css_includes' => [
            '/admin/settings/blog_settings.php' => 'tab-fixes.css',
            '/admin/settings/account_settings.php' => 'tab-fixes.css',
            '/admin/accounts/email_templates.php' => 'Summernote 0.8.18 (different version)'
        ]
    ],
    'client_portal_context' => [
        'location' => '/public_html/client_portal/',
        'main_includes' => '/client_portal/assets/includes/doctype.php',
        'css_framework' => 'Bootstrap (local vendor files)',
        'icon_library' => 'Font Awesome 6.2.0 (CDN), Bootstrap Icons, Boxicons',
        'included_css' => [
            'Font Awesome 6.2.0' => 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css',
            'Bootstrap Local' => '/client_portal/assets/vendor/bootstrap/css/bootstrap.min.css',
            'Bootstrap Icons' => '/client_portal/assets/vendor/bootstrap-icons/bootstrap-icons.css',
            'Boxicons' => '/client_portal/assets/vendor/boxicons/css/boxicons.min.css',
            'Quill Editor' => '/client_portal/assets/vendor/quill/quill.snow.css',
            'DataTables' => '/client_portal/assets/vendor/simple-datatables/style.css',
            'Main Style' => '/client_portal/assets/css/style.css'
        ],
        'scss_structure' => [
            'Main SCSS' => '/client_portal/assets/scss/style.scss',
            'Variables' => '/client_portal/assets/scss/_variables.scss',
            'Header' => '/client_portal/assets/scss/_header.scss',
            'Sidebar' => '/client_portal/assets/scss/_sidebar.scss',
            'Dashboard' => '/client_portal/assets/scss/_dashboard.scss',
            'Pages' => '/client_portal/assets/scss/_pages.scss',
            'Footer' => '/client_portal/assets/scss/_footer.scss',
            'General' => '/client_portal/assets/scss/_general.scss',
            'Override' => '/client_portal/assets/scss/_override.scss'
        ],
        'js_includes' => [
            'Main JS' => '/client_portal/assets/js/main.js',
            'TinyMCE integration' => 'Included in main.js',
            'Bootstrap validation' => 'Included in main.js'
        ]
    ],
    'public_website_context' => [
        'location' => '/public_html/',
        'main_includes' => '/assets/includes/',
        'structure' => 'Modular includes system',
        'shared_components' => [
            'doctype.php' => 'HTML head and SEO',
            'header.php' => 'Navigation and branding',
            'footer.php' => 'Footer content and scripts'
        ],
        'shared_dependencies' => [
            'Universal Config' => '/private/gws-universal-config.php',
            'SEO Settings' => '/assets/includes/settings/seo_settings.php',
            'Meta Config' => '/assets/settings/meta-config.php'
        ]
    ],
    'universal_shared_context' => [
        'private_resources' => [
            'Core Config' => '/private/gws-universal-config.php',
            'Core Functions' => '/private/gws-universal-functions.php',
            'Universal Branding' => '/private/gws-universal-branding.css'
        ],
        'public_shared_resources' => [
            'Assets Directory' => '/public_html/assets/',
            'Settings Directory' => '/public_html/assets/includes/settings/',
            'Shared Templates' => '/public_html/shared/templates/'
        ],
        'cross_context_files' => [
            'Used by ALL contexts' => [
                '/private/gws-universal-config.php',
                '/private/gws-universal-functions.php'
            ],
            'Used by multiple contexts' => [
                '/public_html/assets/includes/settings/seo_settings.php',
                '/assets/settings/meta-config.php'
            ]
        ]
    ]
];

// ============================================================================
// SECTION 2: CROSS-CONTEXT PROTECTION STRATEGY  
// ============================================================================

$cross_context_protection = [
    'critical_safety_rules' => [
        'rule_1' => 'NEVER delete any CSS/JS file without verifying it is not used by ANY context',
        'rule_2' => 'Use quarantine approach instead of direct deletion for ALL changes',
        'rule_3' => 'Maintain detailed change log in /private/quarantined_edit_deletions/changes.php',
        'rule_4' => 'Test ALL contexts after any change, not just the target context',
        'rule_5' => 'Shared/Universal resources are SACRED - never modify without full impact analysis'
    ],
    'protection_methodology' => [
        'step_1_inventory' => 'Create complete inventory of ALL CSS/JS files across ALL contexts',
        'step_2_dependency_mapping' => 'Map which files are used by which contexts',
        'step_3_cross_reference' => 'Identify shared dependencies and universal resources',
        'step_4_quarantine_strategy' => 'Move (never delete) unused files to quarantine directory',
        'step_5_rollback_capability' => 'Maintain ability to restore any quarantined file'
    ],
    'change_logging_system' => [
        'log_file' => '/private/quarantined_edit_deletions/changes.php',
        'log_format' => [
            'timestamp' => 'Date and time of change',
            'context_affected' => 'Which application context was being cleaned',
            'file_path' => 'Original file location',
            'action_taken' => 'quarantined|moved|renamed|modified',
            'backup_location' => 'Where original file/content is stored',
            'reason' => 'Why the change was made',
            'tested_contexts' => 'Which contexts were tested after change',
            'rollback_instructions' => 'Exact steps to undo the change'
        ]
    ],
    'shared_resource_protection' => [
        'never_touch_files' => [
            '/private/gws-universal-config.php' => 'Core configuration used by ALL contexts',
            '/private/gws-universal-functions.php' => 'Universal functions used by ALL contexts',
            '/private/gws-universal-branding.css' => 'Universal styling variables',
            '/public_html/assets/includes/settings/seo_settings.php' => 'SEO used by multiple contexts',
            '/assets/settings/meta-config.php' => 'Meta tags used by multiple contexts'
        ],
        'careful_modification_files' => [
            '/public_html/assets/' => 'Shared assets directory - check ALL context usage',
            '/public_html/shared/' => 'Explicitly shared templates and resources'
        ]
    ],
    'context_specific_testing' => [
        'admin_context_test' => [
            'test_pages' => [
                '/admin/dashboard.php',
                '/admin/settings/settings.php',
                '/admin/blog/posts.php',
                '/admin/tickets/tickets.php'
            ],
            'verify_functionality' => [
                'Summernote editor functionality',
                'Bootstrap modals and dropdowns',
                'Font Awesome icons display',
                'Admin forms and tables'
            ]
        ],
        'accounts_system_test' => [
            'test_pages' => [
                '/accounts_system/login.php',
                '/accounts_system/register.php',
                '/accounts_system/profile.php'
            ],
            'verify_functionality' => [
                'Login/logout process',
                'Registration form styling',
                'Profile editing interface'
            ]
        ],
        'blog_system_test' => [
            'test_pages' => [
                '/blog.php',
                '/post.php',
                '/category.php'
            ],
            'verify_functionality' => [
                'Blog post display',
                'Comment system styling',
                'Category filtering',
                'Gallery sidebar checkboxes'
            ]
        ],
        'client_portal_test' => [
            'test_pages' => [
                '/client_portal/index.php',
                '/client_portal/dashboard.php',
                '/client_portal/users-profile.php'
            ],
            'verify_functionality' => [
                'Dashboard charts and widgets',
                'Navigation and sidebar',
                'Form validation',
                'TinyMCE editor'
            ]
        ],
        'public_website_test' => [
            'test_pages' => [
                '/index.php',
                '/contact.php',
                '/about.php'
            ],
            'verify_functionality' => [
                'Main navigation',
                'Contact forms',
                'Content sections'
            ]
        ]
    ]
];

// ============================================================================
// SECTION 3: QUARANTINE-BASED CLEANUP APPROACH
// ============================================================================

$quarantine_approach = [
    'quarantine_directory_structure' => [
        'base_directory' => '/private/quarantined_edit_deletions/',
        'subdirectories' => [
            'css_files/' => 'Quarantined CSS files with original path structure',
            'js_files/' => 'Quarantined JavaScript files with original path structure',
            'inline_styles/' => 'Extracted inline style blocks',
            'backups/' => 'Full file backups before modification',
            'metadata/' => 'File usage information and dependencies'
        ]
    ],
    'quarantine_process' => [
        'phase_1_preparation' => [
            'action' => 'Prepare quarantine directory structure',
            'steps' => [
                '1' => 'Create quarantine subdirectories',
                '2' => 'Initialize changes.php log file',
                '3' => 'Create rollback script template',
                '4' => 'Document current state of all contexts'
            ]
        ],
        'phase_2_safe_cleanup' => [
            'action' => 'Move (never delete) identified orphaned files',
            'steps' => [
                '1' => 'Copy file to quarantine with full path structure',
                '2' => 'Document file usage analysis in metadata',
                '3' => 'Test ALL contexts to ensure no breakage',
                '4' => 'Only remove original if all tests pass',
                '5' => 'Log complete change details in changes.php'
            ]
        ],
        'phase_3_inline_style_extraction' => [
            'action' => 'Extract inline styles to proper CSS files (additive only)',
            'steps' => [
                '1' => 'Backup original file completely',
                '2' => 'Extract inline styles to new CSS file',
                '3' => 'Add new CSS file to includes (do not modify existing includes)',
                '4' => 'Test that styling remains identical',
                '5' => 'Only remove inline styles if test passes',
                '6' => 'Maintain ability to rollback to inline styles'
            ]
        ]
    ]
];

// ============================================================================
// SECTION 4: COMPREHENSIVE CROSS-CONTEXT PROTECTION STRATEGY
// ============================================================================

$cross_context_protection_strategy = [
    'master_protection_rules' => [
        'rule_1_universal_files' => 'Files in /private/ are UNIVERSAL - used by ALL contexts - NEVER modify without full impact analysis',
        'rule_2_shared_assets' => 'Files in /public_html/assets/ may be shared - verify usage across ALL contexts before changes',
        'rule_3_context_isolation' => 'Each context may reference files from other contexts - check ALL contexts before deleting anything',
        'rule_4_quarantine_only' => 'NEVER delete files - always quarantine first with full rollback capability',
        'rule_5_additive_changes' => 'Extract inline styles by ADDING new CSS files, not modifying existing ones',
        'rule_6_comprehensive_testing' => 'After ANY change, test ALL contexts, not just the target context'
    ],
    'protected_universal_resources' => [
        'never_modify_these_files' => [
            '/private/gws-universal-config.php' => 'Core configuration used by ALL contexts',
            '/private/gws-universal-functions.php' => 'Universal helper functions used by ALL contexts',
            '/private/gws-universal-branding.css' => 'Universal CSS variables and branding',
            '/public_html/assets/includes/settings/seo_settings.php' => 'SEO settings used by multiple contexts'
        ],
        'careful_modification_required' => [
            '/public_html/assets/' => 'Shared assets directory - check ALL context usage first',
            '/public_html/shared/' => 'Explicitly shared templates and resources',
            '/assets/settings/' => 'Settings files may be used by multiple contexts'
        ]
    ],
    'context_dependency_verification' => [
        'before_any_change_check' => [
            'admin_references' => 'grep -r "filename" /public_html/admin/',
            'accounts_references' => 'grep -r "filename" /public_html/accounts_system/',
            'blog_references' => 'grep -r "filename" /public_html/blog_system/',
            'client_portal_references' => 'grep -r "filename" /public_html/client_portal/',
            'public_references' => 'grep -r "filename" /public_html/*.php',
            'universal_references' => 'grep -r "filename" /private/'
        ],
        'cross_context_usage_patterns' => [
            'admin_may_reference' => 'Blog assets, account assets for management',
            'blog_may_reference' => 'Universal assets, shared templates',
            'accounts_may_reference' => 'Universal config, shared functions',
            'client_portal_may_reference' => 'Universal config, shared assets',
            'public_may_reference' => 'Universal assets, shared templates'
        ]
    ]
];

// ============================================================================
// SECTION 5: ULTRA-SAFE EXECUTION WORKFLOW
// ============================================================================

$ultra_safe_workflow = [
    'phase_0_preparation' => [
        'action' => 'Prepare for multi-context cleanup with maximum safety',
        'steps' => [
            '1' => 'Create full application backup',
            '2' => 'Initialize quarantine directory structure',
            '3' => 'Set up comprehensive change logging in changes.php',
            '4' => 'Document baseline state of ALL contexts',
            '5' => 'Take reference screenshots of key pages in each context',
            '6' => 'Test all contexts to ensure everything works before starting'
        ]
    ],
    'phase_1_dependency_mapping' => [
        'action' => 'Map ALL CSS/JS dependencies across ALL contexts',
        'steps' => [
            '1' => 'Inventory every CSS file in every context',
            '2' => 'Inventory every JS file in every context',
            '3' => 'Map which files include which other files',
            '4' => 'Identify files used by multiple contexts',
            '5' => 'Mark universal/shared files as protected',
            '6' => 'Create dependency matrix showing context relationships'
        ],
        'deliverable' => 'Complete cross-context dependency map preventing any unsafe deletions'
    ],
    'phase_2_zero_risk_cleanup' => [
        'action' => 'Execute only zero-risk changes first',
        'zero_risk_targets' => [
            'Empty files (table-styles.css)' => 'File is empty, no possible impact',
            'Exact duplicates (admin copy.css)' => 'Files are byte-for-byte identical',
            'Unused documentation files' => 'Files not referenced anywhere'
        ],
        'process' => [
            '1' => 'Verify file is truly empty or duplicate',
            '2' => 'Search ALL contexts for any reference to file',
            '3' => 'Quarantine file (move to quarantine, don\'t delete)',
            '4' => 'Test ALL contexts after quarantine',
            '5' => 'Log change with complete rollback instructions',
            '6' => 'Only proceed if all contexts still work perfectly'
        ]
    ],
    'phase_3_inline_style_extraction' => [
        'action' => 'Extract inline styles using ultra-safe additive approach',
        'methodology' => 'ADDITIVE ONLY - never remove inline styles until new CSS is proven identical',
        'process' => [
            '1' => 'Create new CSS file with extracted styles',
            '2' => 'Add new CSS file to appropriate includes (never modify existing includes)',
            '3' => 'Test that page renders pixel-perfect identical',
            '4' => 'Use before/after screenshots for verification',
            '5' => 'Only after perfect match confirmed, remove inline styles',
            '6' => 'Maintain backup of original file with inline styles'
        ],
        'rollback_capability' => 'Every extraction maintains original file backup for instant rollback'
    ],
    'phase_4_comprehensive_verification' => [
        'action' => 'Verify all contexts work perfectly after all changes',
        'verification_checklist' => [
            'admin_functionality' => 'All admin features work identically',
            'admin_styling' => 'All admin pages look identical',
            'accounts_functionality' => 'Login, registration, profiles work',
            'blog_functionality' => 'Posts, comments, gallery work',
            'blog_styling' => 'Blog pages look identical',
            'client_portal_functionality' => 'Dashboard, forms, navigation work',
            'client_portal_styling' => 'Client portal looks identical',
            'public_functionality' => 'Main website works identically',
            'public_styling' => 'Main website looks identical'
        ]
    ]
];

// ============================================================================
// SECTION 6: CRITICAL CODE INTEGRATION AND CONTEXT REQUIREMENTS
// ============================================================================

$code_integration_requirements = [
    'critical_developer_mindset' => [
        'requirement' => 'Think like a full-stack LAMP developer (Linux, Apache, MySQL, PHP) with deep understanding of web application architecture',
        'technologies_to_consider' => [
            'PHP' => 'Server-side logic, includes, variable scope, execution order',
            'HTML' => 'Document structure, element nesting, semantic markup',
            'CSS' => 'Selector specificity, cascade order, responsive design',
            'JavaScript/AJAX' => 'DOM manipulation, event handling, asynchronous requests',
            'MySQL' => 'Database connections, prepared statements, data integrity',
            'Apache' => 'URL rewriting, .htaccess rules, directory permissions'
        ],
        'integration_awareness' => 'Every change must consider how PHP, HTML, CSS, and JavaScript interact within the LAMP stack architecture'
    ],
    'catastrophic_mistakes_to_avoid' => [
        'mistake_1_code_in_comments' => [
            'error' => 'Placing executable code inside comment blocks',
            'examples' => [
                'wrong' => '<!-- <?php echo $variable; ?> -->',
                'wrong' => '/* <?php include "file.php"; ?> */',
                'wrong' => '// <script>alert("test");</script>'
            ],
            'consequence' => 'Code becomes non-functional, application breaks silently',
            'prevention' => 'Always verify code is outside comment blocks and properly executable'
        ],
        'mistake_2_mixed_code_contexts' => [
            'error' => 'Placing one type of code inside another type\'s block',
            'examples' => [
                'wrong' => '<style><?php echo $css; ?></style> (PHP inside CSS block)',
                'wrong' => '<?php echo "<script>var data = $phpArray;</script>"; ?> (Improper JS generation)',
                'wrong' => '<script>alert("<?php echo $message; ?>");</script> (Unescaped PHP in JS)'
            ],
            'consequence' => 'Syntax errors, security vulnerabilities, broken functionality',
            'prevention' => 'Respect code block boundaries, use proper escaping and context switching'
        ],
        'mistake_3_essential_tag_deletion' => [
            'error' => 'Deleting essential HTML tags, PHP tags, or structural elements',
            'examples' => [
                'wrong' => 'Deleting <?php opening tags or ?> closing tags',
                'wrong' => 'Removing </div>, </body>, </html> closing tags',
                'wrong' => 'Deleting include statements or configuration loads'
            ],
            'consequence' => 'Complete application failure, impossible to recover',
            'prevention' => 'Analyze structural necessity before deleting any tags or statements'
        ],
        'mistake_4_execution_order_violation' => [
            'error' => 'Placing code at top of page without considering include dependencies',
            'examples' => [
                'wrong' => 'Using database connection before include "config.php"',
                'wrong' => 'Calling functions before include "functions.php"',
                'wrong' => 'Using session variables before session_start()'
            ],
            'consequence' => 'Fatal errors, undefined function/variable errors',
            'prevention' => 'Always analyze dependency chain and execution order'
        ],
        'mistake_5_context_embedding_errors' => [
            'error' => 'Improper embedding of PHP within HTML or vice versa',
            'examples' => [
                'wrong' => 'Adding PHP outside <?php ?> tags in HTML documents',
                'wrong' => 'Breaking HTML structure when embedding PHP loops',
                'wrong' => 'Improper escaping when PHP generates HTML/CSS/JS'
            ],
            'consequence' => 'Parsing errors, XSS vulnerabilities, broken rendering',
            'prevention' => 'Maintain proper embedding context and escape output appropriately'
        ]
    ],
    'mandatory_analysis_checklist' => [
        'before_any_code_change' => [
            '1_file_type_analysis' => 'Identify if file is pure PHP, mixed PHP/HTML, CSS, JS, or configuration',
            '2_dependency_analysis' => 'Check what files this file includes and what files include this file',
            '3_execution_context' => 'Understand where in the request lifecycle this code executes',
            '4_variable_scope' => 'Verify all variables are properly defined and in scope',
            '5_function_availability' => 'Ensure all called functions are loaded before use',
            '6_html_structure' => 'Verify HTML document structure remains valid',
            '7_css_cascade' => 'Check CSS selector specificity and inheritance impact',
            '8_js_dom_ready' => 'Ensure JavaScript executes after DOM elements exist',
            '9_security_context' => 'Verify proper escaping and input validation',
            '10_error_handling' => 'Consider error conditions and graceful degradation'
        ],
        'during_code_modification' => [
            '1_maintain_php_tags' => 'Never break <?php opening or ?> closing tag pairs',
            '2_preserve_html_structure' => 'Keep opening and closing HTML tags balanced',
            '3_respect_css_blocks' => 'Keep CSS within <style> tags or .css files',
            '4_isolate_js_blocks' => 'Keep JavaScript within <script> tags or .js files',
            '5_proper_commenting' => 'Use correct comment syntax for each language',
            '6_maintain_indentation' => 'Preserve code structure and readability',
            '7_escape_output' => 'Use htmlspecialchars(), json_encode(), etc. appropriately',
            '8_validate_syntax' => 'Ensure valid syntax for each language used'
        ],
        'after_code_modification' => [
            '1_syntax_validation' => 'Check PHP syntax: php -l filename.php',
            '2_html_validation' => 'Verify HTML structure is valid and complete',
            '3_css_validation' => 'Check CSS syntax and selector validity',
            '4_js_validation' => 'Verify JavaScript syntax and DOM references',
            '5_functional_testing' => 'Test actual functionality, not just syntax',
            '6_error_log_check' => 'Monitor error logs for new issues',
            '7_cross_browser_check' => 'Verify rendering across different browsers',
            '8_security_review' => 'Check for XSS, SQL injection, and other vulnerabilities'
        ]
    ],
    'lamp_stack_specific_considerations' => [
        'php_integration' => [
            'include_order' => 'Config files → Database connections → Functions → Authentication → Content',
            'variable_scope' => 'Global vs local scope, superglobals ($_GET, $_POST, $_SESSION)',
            'error_handling' => 'try/catch blocks, error reporting levels, graceful degradation',
            'output_buffering' => 'Understanding ob_start(), header() restrictions, content output timing'
        ],
        'html_php_embedding' => [
            'proper_embedding' => 'PHP within HTML: <?php echo $var; ?>, HTML within PHP: echo "<div>content</div>";',
            'alternative_syntax' => 'Use <?php if(): ?> ... <?php endif; ?> for better HTML readability',
            'escaping_rules' => 'htmlspecialchars() for HTML content, json_encode() for JavaScript data',
            'template_separation' => 'Separate logic from presentation, use includes for templates'
        ],
        'css_integration' => [
            'dynamic_css' => 'PHP generating CSS: proper content-type headers, variable interpolation',
            'responsive_design' => 'Mobile-first approach, breakpoint considerations',
            'specificity_rules' => 'Understand CSS cascade, inheritance, and selector weight',
            'performance' => 'Minimize HTTP requests, use CSS minification, leverage browser caching'
        ],
        'javascript_ajax' => [
            'dom_readiness' => 'Ensure DOM is loaded before manipulation',
            'ajax_integration' => 'Proper error handling, CSRF protection, JSON responses',
            'php_data_passing' => 'Use json_encode() to pass PHP data to JavaScript safely',
            'event_handling' => 'Proper event binding, delegation for dynamic content'
        ],
        'mysql_integration' => [
            'connection_management' => 'PDO vs mysqli, connection pooling, error handling',
            'prepared_statements' => 'Always use prepared statements for user input',
            'transaction_handling' => 'BEGIN, COMMIT, ROLLBACK for data integrity',
            'result_processing' => 'Proper fetching, error checking, resource cleanup'
        ]
    ],
    'quality_assurance_protocol' => [
        'mandatory_testing_sequence' => [
            'step_1_syntax_check' => 'Validate syntax for all modified languages',
            'step_2_include_verification' => 'Verify all includes are still functioning',
            'step_3_variable_verification' => 'Check all variables are properly defined',
            'step_4_function_verification' => 'Ensure all function calls are valid',
            'step_5_database_verification' => 'Test database connections and queries',
            'step_6_session_verification' => 'Verify session handling and authentication',
            'step_7_output_verification' => 'Check HTML output is valid and complete',
            'step_8_security_verification' => 'Verify no new security vulnerabilities introduced'
        ],
        'failure_response_protocol' => [
            'immediate_rollback' => 'If any test fails, immediately rollback changes',
            'error_analysis' => 'Analyze exactly what went wrong and why',
            'context_review' => 'Review the context and integration requirements',
            'corrective_action' => 'Plan corrective action that respects all contexts',
            'retest_completely' => 'Retest entire sequence after correction'
        ]
    ]
];

// ============================================================================
// SECTION 2: STANDARDIZATION FRAMEWORK
// ============================================================================

$standardization_framework = [
    'admin_architecture' => [
        'primary_css_structure' => [
            '1_bootstrap_cdn' => 'Bootstrap 5.3.3 (CDN)',
            '2_fontawesome_cdn' => 'Font Awesome 5.15.4 (CDN)',
            '3_datatables_cdn' => 'DataTables BS5 (CDN)',
            '4_summernote_cdn' => 'Summernote BS5 (CDN)',
            '5_admin_core' => '/admin/assets/css/admin.css (Core admin styles)',
            '6_admin_dashboard' => '/admin/assets/css/dashboard.css (Dashboard specific)',
            '7_admin_components' => '/admin/assets/css/components.css (NEW - Extract inline styles)',
            '8_admin_tables' => '/admin/assets/css/tables.css (NEW - Table standardization)',
            '9_admin_forms' => '/admin/assets/css/forms.css (NEW - Form components)',
            '10_admin_custom' => '/admin/assets/css/custom.css (NEW - Site-specific overrides)'
        ],
        'primary_js_structure' => [
            '1_jquery_cdn' => 'jQuery 3.7.1 (CDN)',
            '2_bootstrap_cdn' => 'Bootstrap 5.3.3 Bundle (CDN)', 
            '3_datatables_cdn' => 'DataTables BS5 (CDN)',
            '4_summernote_cdn' => 'Summernote BS5 (CDN)',
            '5_admin_core' => '/admin/assets/js/admin-core.js (NEW - Core functionality)',
            '6_admin_tables' => '/admin/assets/js/admin-tables.js (NEW - Table interactions)',
            '7_admin_forms' => '/admin/assets/js/admin-forms.js (NEW - Form handling)',
            '8_admin_accessibility' => '/admin/assets/js/accessibility.js (RENAMED from accessibility-fix.js)'
        ]
    ],
    'css_naming_conventions' => [
        'namespace_prefix' => 'gws-admin-',
        'component_classes' => [
            'tables' => '.gws-admin-table, .gws-admin-table-header, .gws-admin-table-actions',
            'forms' => '.gws-admin-form, .gws-admin-input, .gws-admin-button',
            'dashboard' => '.gws-admin-dashboard, .gws-admin-widget, .gws-admin-stat',
            'navigation' => '.gws-admin-nav, .gws-admin-sidebar, .gws-admin-breadcrumb'
        ],
        'avoid_conflicts' => [
            'never_override' => ['Bootstrap core classes', 'Font Awesome icons', 'DataTables classes'],
            'use_specific_selectors' => '.gws-admin-container .custom-class instead of just .custom-class',
            'cascade_properly' => 'More specific selectors override less specific ones'
        ]
    ]
];

// ============================================================================
// SECTION 3: ZERO-IMPACT CLEANUP EXECUTION PLAN
// ============================================================================

/* 
 * CRITICAL REQUIREMENT: ZERO IMPACT GUARANTEE
 * 
 * This plan is designed with the absolute requirement that:
 * 1. NO existing functionality will be changed, broken, or modified
 * 2. NO existing styling will be altered, overridden, or affected
 * 3. ALL changes are purely additive and organizational
 * 4. COMPLETE rollback capability exists at every step
 * 5. EXTENSIVE testing validates zero impact before proceeding
 */

$cleanup_plan = [
    'phase_0_zero_impact_validation' => [
        'action' => 'Establish ironclad baseline and rollback procedures',
        'critical_steps' => [
            '1' => 'Create complete system snapshot with database backup',
            '2' => 'Document every single CSS rule currently applied to every admin page',
            '3' => 'Screenshot every admin page in multiple browsers for visual comparison',
            '4' => 'Record all JavaScript functionality with automated testing scripts',
            '5' => 'Create instant rollback procedure that can restore entire system in under 5 minutes',
            '6' => 'Test rollback procedure to ensure it works perfectly'
        ],
        'validation_requirements' => [
            'visual_comparison' => 'Every admin page must look pixel-perfect identical',
            'functionality_testing' => 'Every button, form, table, dropdown must work exactly the same',
            'performance_baseline' => 'Page load times must not increase',
            'browser_compatibility' => 'All existing browser support must be maintained'
        ],
        'rollback_triggers' => [
            'any_visual_difference' => 'Immediate rollback if any page looks different',
            'any_functionality_loss' => 'Immediate rollback if any feature breaks',
            'any_performance_degradation' => 'Immediate rollback if performance decreases',
            'any_browser_compatibility_loss' => 'Immediate rollback if browser support changes'
        ]
    ],

    'phase_1_audit_and_backup' => [
        'action' => 'Comprehensive file audit and backup with zero-impact verification',
        'steps' => [
            '1' => 'Create backup directory: /private/backups/css-js-cleanup-' . date('Y-m-d'),
            '2' => 'Backup all existing CSS/JS files with checksums for verification',
            '3' => 'Document all inline style blocks with file locations and line numbers',
            '4' => 'Inventory all CSS classes currently in use across admin files',
            '5' => 'Test current functionality to establish baseline - COMPREHENSIVE testing',
            '6' => 'Create automated test suite that can verify zero changes after each step'
        ],
        'deliverables' => [
            'backup_archive.zip',
            'inline_styles_inventory.txt',
            'css_classes_used.txt',
            'functionality_test_results.txt',
            'visual_baseline_screenshots.zip',
            'automated_test_suite.js',
            'rollback_procedure.txt'
        ],
        'safety_measures' => [
            'triple_backup' => 'Local, network, and cloud backups',
            'checksum_verification' => 'Verify all backups are complete and uncorrupted',
            'baseline_documentation' => 'Document exact current state with checksums',
            'automated_testing' => 'Scripts that can verify functionality automatically'
        ]
    ],
    'phase_2_conservative_orphan_removal' => [
        'action' => 'Remove ONLY confirmed safe files with zero functionality impact',
        'ultra_conservative_approach' => [
            'only_delete_empty_files' => 'Only delete files that are completely empty',
            'only_delete_true_duplicates' => 'Only delete files that are exact copies with same content',
            'never_delete_if_uncertain' => 'If there is ANY doubt, do not delete',
            'verify_no_references' => 'Triple-check no files reference these anywhere in codebase'
        ],
        'confirmed_safe_deletions' => [
            '/admin/assets/css/table-styles.css' => 'EMPTY FILE - Zero content, safe to delete',
            '/admin/accounts/admin copy.css' => 'EXACT DUPLICATE - Only if byte-for-byte identical'
        ],
        'do_not_delete_until_further_investigation' => [
            '/admin/assets/css/dashboard-custom-example.css' => 'May be reference template - KEEP',
            '/admin/landing_page_generator/template/assets/css/main copy.css' => 'May be needed - INVESTIGATE FIRST',
            '/admin/assets/js/table-actions.js' => 'May have hidden functionality - KEEP UNTIL VERIFIED',
            '/admin/assets/js/badge-accessibility.js' => 'Accessibility features - KEEP UNTIL VERIFIED'
        ],
        'deletion_safety_protocol' => [
            '1' => 'Move file to /private/backups/quarantine/ instead of deleting',
            '2' => 'Test all admin functionality after each file moved',
            '3' => 'Wait 48 hours with full system testing before permanent deletion',
            '4' => 'If ANY issue discovered, immediately restore from quarantine',
            '5' => 'Only permanently delete after 1 week of confirmed zero impact'
        ]
    ],

    'phase_3_additive_only_style_organization' => [
        'action' => 'Organize styles without changing ANY existing behavior - ADDITIVE ONLY',
        'zero_impact_methodology' => [
            'never_modify_existing_files' => 'Do not edit admin.css, dashboard.css, or any existing CSS',
            'create_new_files_only' => 'Create new CSS files for organization without touching existing',
            'copy_not_move' => 'Copy inline styles to new files, leave originals unchanged initially',
            'additive_includes' => 'Add new CSS files to load order without removing existing includes',
            'test_after_each_addition' => 'Verify zero impact after each new file added'
        ],
        'target_files_for_organization' => [
            '/admin/accounts/account.php' => 'Copy inline styles to new file, test, then optionally remove inline styles',
            '/admin/accounts/accounts_table_transfer.php' => 'Copy inline styles to new file, test, then optionally remove',
            '/admin/accounts/documents.php' => 'Copy inline styles to new file, test, then optionally remove',
            '/admin/blog/albums.php' => 'Copy inline styles to new file, test, then optionally remove',
            '/admin/landing_page_generator/branding-ui.php' => 'Copy inline styles to new file, test, then optionally remove',
            '/admin/landing_page_generator/template/index.php' => 'Copy inline styles to new file, test, then optionally remove',
            '/admin/landing_page_generator/process.php' => 'Copy inline styles to new file, test, then optionally remove'
        ],
        'organization_process_per_file' => [
            '1' => 'Identify and copy all inline styles from file',
            '2' => 'Create new CSS file: /admin/assets/css/extracted/[filename]-styles.css',
            '3' => 'Add new CSS file to admin includes (additional, not replacement)',
            '4' => 'Test entire admin system - must be 100% identical',
            '5' => 'If testing passes, optionally comment out inline styles (not delete)',
            '6' => 'Test again with inline styles commented out',
            '7' => 'Only remove inline styles if 100% confident it works identically',
            '8' => 'Keep commented-out styles for rollback capability'
        ],
        'new_css_files_created' => [
            '/admin/assets/css/extracted/' => 'New directory for extracted styles',
            '/admin/assets/css/extracted/account-styles.css' => 'Styles from account.php',
            '/admin/assets/css/extracted/table-transfer-styles.css' => 'Styles from accounts_table_transfer.php',
            '/admin/assets/css/extracted/documents-styles.css' => 'Styles from documents.php',
            '/admin/assets/css/extracted/albums-styles.css' => 'Styles from albums.php',
            '/admin/assets/css/extracted/branding-ui-styles.css' => 'Styles from branding-ui.php',
            '/admin/assets/css/extracted/template-index-styles.css' => 'Styles from template/index.php',
            '/admin/assets/css/extracted/process-styles.css' => 'Styles from process.php'
        ]
    ],

    'phase_4_conservative_standardization' => [
        'action' => 'Standardize includes without changing any existing functionality',
        'conservative_approach' => [
            'add_not_replace' => 'Add standardized includes alongside existing ones initially',
            'gradual_transition' => 'Only remove old includes after extensive testing proves new ones work',
            'maintain_compatibility' => 'Ensure all existing functionality works with both old and new includes',
            'version_consistency' => 'Standardize versions only if current functionality is preserved'
        ],
        'standardization_targets' => [
            'summernote_versions' => 'Standardize on single version that works with all existing functionality',
            'individual_css_includes' => 'Consolidate tab-fixes.css includes into main files',
            'javascript_dependencies' => 'Ensure all existing JS functionality is preserved',
            'load_order_optimization' => 'Optimize without breaking existing dependencies'
        ],
        'implementation_safety' => [
            '1' => 'Add new standardized includes to main.php',
            '2' => 'Test all admin functionality with both old and new includes active',
            '3' => 'Gradually remove individual page includes only after confirming redundancy',
            '4' => 'Maintain fallback includes for critical functionality',
            '5' => 'Document exactly what each include provides for rollback purposes'
        ]
    ]
];

// ============================================================================
// SECTION 4: INTEGRATION PLAN FOR NEW APPLICATIONS
// ============================================================================

$integration_plan = [
    'new_application_workflow' => [
        'zero_impact_guarantee' => [
            'existing_admin_untouched' => 'NO existing admin files will be modified in any way',
            'existing_styling_preserved' => 'NO existing CSS rules will be changed, overridden, or affected',
            'existing_functionality_maintained' => 'ALL current functionality will work exactly as before',
            'additive_only_approach' => 'New application styles will be ADDED ONLY, never replacing existing'
        ],
        'step_1_isolation_analysis' => [
            'action' => 'Analyze new application in complete isolation',
            'process' => [
                '1' => 'Set up new application in separate test environment',
                '2' => 'Inventory all CSS files in new application without touching existing system',
                '3' => 'Identify unique styles vs. duplicates of existing styles',
                '4' => 'Test new application functionality in isolation',
                '5' => 'Document all new CSS classes, IDs, and custom properties',
                '6' => 'Check for any potential conflicts with existing admin styles (without modifying anything)'
            ],
            'safety_measures' => [
                'separate_testing_environment' => 'Never test integration on live/development admin system',
                'complete_documentation' => 'Document every single CSS rule and JS function in new app',
                'conflict_mapping' => 'Map any potential conflicts before integration begins'
            ]
        ],
        'step_2_conflict_prevention' => [
            'action' => 'Prevent any conflicts before integration',
            'conflict_resolution_rules' => [
                'existing_admin_always_wins' => 'If conflict exists, new app styles must be renamed/namespaced',
                'never_override_existing' => 'Never use !important or higher specificity to override existing',
                'namespace_everything_new' => 'All new styles get unique namespace (e.g., gws-newapp-)',
                'isolate_new_components' => 'Wrap new app in container with unique namespace'
            ],
            'process' => [
                '1' => 'Rename all conflicting CSS classes in new application',
                '2' => 'Add unique namespace prefix to all new application styles',
                '3' => 'Wrap new application HTML in unique container class',
                '4' => 'Test new application with renamed styles in isolation',
                '5' => 'Verify zero conflicts with existing admin CSS classes',
                '6' => 'Document all namespace changes for future reference'
            ]
        ],
        'step_3_additive_integration' => [
            'action' => 'Add new application styles without touching existing system',
            'integration_methodology' => [
                'create_new_css_files_only' => 'Never modify existing admin CSS files',
                'add_to_load_order' => 'Add new CSS files to admin includes after existing files',
                'maintain_existing_includes' => 'Keep all existing CSS/JS includes unchanged',
                'test_continuously' => 'Test existing admin functionality after each addition'
            ],
            'process' => [
                '1' => 'Create new CSS file: /admin/assets/css/apps/[appname].css',
                '2' => 'Add new CSS file to main.php includes AFTER existing includes',
                '3' => 'Test all existing admin pages - must be pixel-perfect identical',
                '4' => 'Add new application files to admin directory structure',
                '5' => 'Test new application functionality within admin environment',
                '6' => 'Verify existing admin functionality unchanged',
                '7' => 'Document integration for future reference'
            ]
        ],
        'step_4_verification_and_documentation' => [
            'action' => 'Verify zero impact and document integration',
            'verification_requirements' => [
                'visual_comparison' => 'Screenshot comparison: all existing admin pages must look identical',
                'functionality_testing' => 'All existing admin features must work identically',
                'performance_validation' => 'Page load times must not increase significantly',
                'browser_compatibility' => 'All existing browser support must be maintained'
            ],
            'process' => [
                '1' => 'Run automated test suite on all existing admin functionality',
                '2' => 'Visual comparison of all admin pages before/after integration',
                '3' => 'Performance testing to ensure no degradation',
                '4' => 'Document new application CSS additions and their purpose',
                '5' => 'Update this plan document with new application details',
                '6' => 'Create rollback procedure specific to new application'
            ]
        ]
    ],
    'absolute_conflict_resolution' => [
        'existing_system_protection' => [
            'rule_1' => 'Existing admin styles are SACRED - never modify them',
            'rule_2' => 'If new app conflicts with existing, new app must change',
            'rule_3' => 'Use more specific selectors for new app, never for existing admin',
            'rule_4' => 'All new CSS must be namespaced to prevent any conflicts'
        ],
        'bootstrap_conflict_prevention' => [
            'rule' => 'Never override Bootstrap classes used by existing admin',
            'solution' => 'Namespace new app containers: .gws-newapp-container .btn instead of .btn',
            'example' => '.gws-inventory-app .btn-primary { custom styles } /* NOT .btn-primary { custom styles } */'
        ],
        'fontawesome_conflict_prevention' => [
            'rule' => 'Never modify Font Awesome classes',
            'solution' => 'Wrap new icons in namespaced containers',
            'example' => '.gws-newapp-icon { font-size: larger; } .gws-newapp-icon .fas { additional styles }'
        ],
        'existing_admin_conflict_prevention' => [
            'rule' => 'Existing admin CSS takes absolute precedence',
            'solution' => 'All new styles must use unique class names or namespaced containers',
            'example' => '.gws-newapp-feature instead of .feature, .gws-newapp-container .table instead of .table'
        ]
    ]
];

// ============================================================================
// SECTION 5: CSS OPTIMIZATION BEST PRACTICES
// ============================================================================

$optimization_best_practices = [
    'file_organization' => [
        'admin_css_structure' => [
            'admin.css' => 'Core admin layout, navigation, general styling',
            'dashboard.css' => 'Dashboard-specific widgets and statistics',
            'components.css' => 'Reusable UI components (modals, alerts, etc.)',
            'tables.css' => 'Table styling following canonical-admin.php standards',
            'forms.css' => 'Form styling, input components, validation states',
            'custom.css' => 'Site-specific overrides and customizations (load last)'
        ],
        'load_order_importance' => [
            '1' => 'CDN libraries (Bootstrap, Font Awesome) load first',
            '2' => 'Third-party plugins (DataTables, Summernote) load second',
            '3' => 'Core admin styles load third',
            '4' => 'Component styles load fourth',
            '5' => 'Custom overrides load last'
        ]
    ],
    'css_efficiency' => [
        'selector_optimization' => [
            'use_classes_over_ids' => 'Classes are reusable, IDs should be unique',
            'avoid_deep_nesting' => 'Keep selectors 3 levels deep maximum',
            'use_meaningful_names' => 'gws-admin-table-header vs .th1',
            'group_related_styles' => 'Keep component styles together'
        ],
        'performance_optimization' => [
            'minimize_css_files' => 'Combine related files during production',
            'use_css_variables' => 'Define color schemes and spacing in :root',
            'avoid_important' => 'Use specific selectors instead of !important',
            'optimize_images' => 'Use CSS sprites or SVG for icons when possible'
        ]
    ],
    'maintainability' => [
        'documentation_standards' => [
            'comment_sections' => 'Clear section headers with purpose',
            'document_overrides' => 'Explain why specific overrides are needed',
            'version_information' => 'Track changes and update dates',
            'cross_references' => 'Link related CSS files and dependencies'
        ],
        'naming_conventions' => [
            'consistent_prefixes' => 'gws-admin- for all admin-specific classes',
            'descriptive_names' => 'gws-admin-table-dropdown vs gws-admin-td',
            'component_grouping' => 'Group related classes with common prefixes',
            'avoid_abbreviations' => 'Use full words for clarity'
        ]
    ]
];

// ============================================================================
// SECTION 6: PUBLIC AND CLIENT PORTAL CONSIDERATIONS
// ============================================================================

$multi_area_considerations = [
    'public_facing_pages' => [
        'separate_concerns' => [
            'never_mix_admin_styles' => 'Public pages should not include admin CSS',
            'separate_namespaces' => 'Use gws-public- prefix for public styles',
            'different_bootstrap_approach' => 'May use different Bootstrap components',
            'seo_considerations' => 'Minimize CSS file size for public pages'
        ],
        'shared_resources' => [
            'common_utilities' => 'Typography, spacing utilities can be shared',
            'brand_variables' => 'Colors, fonts should be consistent across areas',
            'icon_libraries' => 'Font Awesome can be shared if needed'
        ]
    ],
    'client_portal' => [
        'hybrid_approach' => [
            'admin_like_functionality' => 'May need some admin-style components',
            'public_like_presentation' => 'But with user-friendly styling',
            'separate_namespace' => 'Use gws-portal- prefix for portal styles',
            'security_considerations' => 'Different access levels may need different styling'
        ]
    ],
    'cross_area_coordination' => [
        'shared_variables' => [
            'brand_colors' => 'Define in root CSS variables file',
            'typography_scale' => 'Consistent heading sizes across areas',
            'spacing_system' => 'Consistent margins and padding',
            'breakpoints' => 'Consistent responsive breakpoints'
        ],
        'file_structure' => [
            '/assets/css/shared/' => 'Variables, utilities, brand elements',
            '/admin/assets/css/' => 'Admin-specific styles',
            '/assets/css/public/' => 'Public-facing styles', 
            '/client_portal/assets/css/' => 'Client portal styles'
        ]
    ]
];

// ============================================================================
// SECTION 7: IMPLEMENTATION TIMELINE AND MILESTONES
// ============================================================================

$implementation_timeline = [
    'week_1' => [
        'audit_and_backup' => 'Complete inventory and backup of current state',
        'test_baseline' => 'Establish working baseline for all functionality',
        'document_inline_styles' => 'Complete catalog of all inline style blocks'
    ],
    'week_2' => [
        'delete_orphans' => 'Remove confirmed orphaned files',
        'create_new_structure' => 'Create new CSS/JS file structure',
        'extract_first_batch' => 'Extract inline styles from 2-3 files'
    ],
    'week_3' => [
        'continue_extraction' => 'Complete inline style extraction',
        'standardize_includes' => 'Update main.php and other include files',
        'test_functionality' => 'Comprehensive testing of all admin functions'
    ],
    ]
];

// ============================================================================
// SECTION 7: AI EXECUTION SAFETY WITH MANDATORY HUMAN CHECKPOINTS
// ============================================================================

$ai_execution_safety = [
    'critical_ai_prevention_rules' => [
        'never_create_duplicate_files' => 'AI MUST check existing CSS/JS files before creating new ones - NEVER duplicate existing functionality',
        'never_add_redundant_code' => 'AI MUST verify existing CSS classes and JS functions before adding new ones',
        'never_override_without_analysis' => 'AI MUST analyze existing includes and dependencies before making changes',
        'never_proceed_without_human_checkpoint' => 'AI MUST stop at designated checkpoints for human visual verification',
        'never_auto_correct_errors' => 'If AI encounters an error, STOP and report to human - do not attempt automatic correction'
    ],
    'mandatory_human_checkpoints' => [
        'checkpoint_1_before_any_changes' => [
            'trigger' => 'Before making ANY modifications to ANY files',
            'human_action_required' => [
                '1' => 'Load and screenshot all admin pages to establish visual baseline',
                '2' => 'Test all critical admin functionality (login, dashboard, forms, tables)',
                '3' => 'Verify all contexts work perfectly before any changes begin',
                '4' => 'Give explicit approval for AI to proceed to Phase 1'
            ],
            'ai_must_stop_until' => 'Human confirms all systems working and gives explicit go-ahead'
        ],
        'checkpoint_2_after_dependency_mapping' => [
            'trigger' => 'After AI completes cross-context dependency analysis',
            'human_action_required' => [
                '1' => 'Review AI\'s dependency mapping for accuracy',
                '2' => 'Verify AI has not missed any shared files or cross-context references',
                '3' => 'Confirm AI understands which files are protected/universal',
                '4' => 'Give explicit approval for AI to proceed to quarantine phase'
            ],
            'ai_must_stop_until' => 'Human validates dependency mapping and approves next phase'
        ],
        'checkpoint_3_after_each_file_quarantine' => [
            'trigger' => 'After AI quarantines each individual file',
            'human_action_required' => [
                '1' => 'Load and test affected admin pages visually',
                '2' => 'Verify no functionality is broken',
                '3' => 'Confirm quarantined file was truly unused',
                '4' => 'Give approval for next file or stop if issues found'
            ],
            'ai_must_stop_until' => 'Human confirms no visual or functional changes occurred'
        ],
        'checkpoint_4_after_each_style_extraction' => [
            'trigger' => 'After AI extracts inline styles from each file',
            'human_action_required' => [
                '1' => 'Load affected page and verify pixel-perfect visual match',
                '2' => 'Test all interactive elements on that page',
                '3' => 'Compare before/after screenshots',
                '4' => 'Give approval to remove inline styles or rollback if different'
            ],
            'ai_must_stop_until' => 'Human confirms styling is identical before inline removal'
        ],
        'checkpoint_5_final_verification' => [
            'trigger' => 'After all cleanup phases complete',
            'human_action_required' => [
                '1' => 'Comprehensive testing of all admin functionality',
                '2' => 'Visual verification of all admin pages',
                '3' => 'Performance testing to ensure no degradation',
                '4' => 'Final approval or rollback decision'
            ],
            'ai_must_stop_until' => 'Human gives final approval or requests rollback'
        ]
    ],
    'ai_analysis_requirements_before_any_action' => [
        'existing_file_analysis' => [
            'requirement' => 'Before creating ANY new CSS/JS file, AI MUST analyze ALL existing files',
            'process' => [
                '1' => 'Search entire codebase for similar functionality',
                '2' => 'Identify existing CSS classes that provide same styling',
                '3' => 'Check existing JS functions that provide same behavior',
                '4' => 'Verify no duplicate includes or redundant code exists',
                '5' => 'Document why new file is necessary vs. using existing'
            ],
            'prevention_target' => 'Prevent AI from creating duplicate bootstrap.css, admin.css, etc.'
        ],
        'include_analysis' => [
            'requirement' => 'Before modifying includes, AI MUST map existing include chain',
            'process' => [
                '1' => 'Analyze main.php and all include files',
                '2' => 'Map what CSS/JS is already loaded',
                '3' => 'Identify load order and dependencies',
                '4' => 'Check for version conflicts or duplicates',
                '5' => 'Verify proposed changes don\'t break existing chain'
            ],
            'prevention_target' => 'Prevent AI from loading duplicate libraries or breaking load order'
        ],
        'context_verification' => [
            'requirement' => 'Before ANY change, AI MUST verify impact across ALL contexts',
            'process' => [
                '1' => 'Check if file is used by admin context',
                '2' => 'Check if file is used by accounts system',
                '3' => 'Check if file is used by blog system',
                '4' => 'Check if file is used by client portal',
                '5' => 'Check if file is used by public website',
                '6' => 'Document all contexts that would be affected'
            ],
            'prevention_target' => 'Prevent AI from breaking other contexts when cleaning one'
        ]
    ],
    'error_handling_protocol' => [
        'if_ai_encounters_error' => [
            'immediate_action' => 'STOP all processing immediately',
            'required_reporting' => [
                '1' => 'Report exact error message and location',
                '2' => 'Report what action was being attempted',
                '3' => 'Report current state of all modified files',
                '4' => 'Provide complete rollback instructions',
                '5' => 'Wait for human analysis and direction'
            ],
            'forbidden_actions' => [
                'no_auto_correction' => 'Never attempt to fix error automatically',
                'no_file_creation' => 'Never create new files to resolve error',
                'no_include_modification' => 'Never modify includes to resolve error',
                'no_assumption_making' => 'Never assume what the fix should be'
            ]
        ],
        'human_error_resolution' => [
            'process' => [
                '1' => 'Human analyzes error in full context',
                '2' => 'Human determines if rollback or correction needed',
                '3' => 'Human provides specific instructions to AI',
                '4' => 'AI follows human instructions exactly',
                '5' => 'Human verifies correction before AI continues'
            ]
        ]
    ],
    'ai_knowledge_verification' => [
        'before_starting_execution' => [
            'ai_must_confirm_understanding' => [
                '1' => 'Bootstrap 5.3.3 is already loaded via CDN',
                '2' => 'Font Awesome 5.15.4 is already loaded via CDN',
                '3' => 'DataTables is loaded but unused (should be removed)',
                '4' => 'Summernote is already loaded via CDN',
                '5' => 'admin.css and dashboard.css already exist',
                '6' => 'main.php already handles all includes',
                '7' => 'Multiple contexts share some resources',
                '8' => 'Quarantine approach must be used instead of deletion'
            ],
            'ai_must_acknowledge' => 'AI must explicitly confirm it will NOT create duplicate files or redundant code'
        ]
    ]
];

// ============================================================================
// SECTION 8: INTEGRATION SAFETY ENFORCEMENT FOR AI ASSISTANTS
// ============================================================================

$integration_safety_enforcement = [
    'critical_ai_requirements' => [
        'mandatory_developer_mindset' => 'Every AI making changes MUST think like an experienced full-stack LAMP developer with deep understanding of web application architecture',
        'context_analysis_obligation' => 'BEFORE making ANY change, AI must analyze complete file context, dependencies, and integration points',
        'multi_language_awareness' => 'AI must understand how PHP, HTML, CSS, JavaScript, and MySQL interact within the specific file being modified'
    ],
    'catastrophic_error_prevention' => [
        'code_in_comments_disaster' => [
            'error_description' => 'Placing executable code inside comment blocks renders it non-functional',
            'examples_to_avoid' => [
                '<!-- <?php echo $variable; ?> -->' => 'PHP code inside HTML comment - WILL NOT EXECUTE',
                '/* <?php include "file.php"; ?> */' => 'PHP include inside CSS comment - BREAKS APPLICATION',
                '// <script>alert("test");</script>' => 'JavaScript inside comment - WILL NOT EXECUTE'
            ],
            'prevention_rule' => 'VERIFY all code is outside comment blocks and properly executable'
        ],
        'mixed_context_disaster' => [
            'error_description' => 'Placing one language inside another language\'s block breaks both',
            'examples_to_avoid' => [
                '<style><?php echo $css; ?></style>' => 'PHP inside CSS block - BREAKS CSS PARSING',
                '<?php echo "<script>var data = $phpArray;</script>"; ?>' => 'Improper JS generation - SECURITY RISK',
                '<script>alert("<?php echo $message; ?>");</script>' => 'Unescaped PHP in JS - XSS VULNERABILITY'
            ],
            'prevention_rule' => 'RESPECT code block boundaries and use proper escaping/context switching'
        ],
        'essential_deletion_disaster' => [
            'error_description' => 'Deleting essential structural elements completely breaks application',
            'examples_to_avoid' => [
                'Deleting <?php or ?> tags' => 'BREAKS PHP EXECUTION',
                'Removing closing </div>, </body>, </html> tags' => 'BREAKS HTML STRUCTURE',
                'Deleting include statements' => 'BREAKS DEPENDENCIES AND FUNCTIONALITY'
            ],
            'prevention_rule' => 'ANALYZE structural necessity before deleting ANY tags or statements'
        ],
        'execution_order_disaster' => [
            'error_description' => 'Placing code before its dependencies are loaded causes fatal errors',
            'examples_to_avoid' => [
                'Using $pdo before include "config.php"' => 'UNDEFINED VARIABLE ERROR',
                'Calling custom_function() before include "functions.php"' => 'FATAL ERROR',
                'Using $_SESSION before session_start()' => 'SESSION NOT INITIALIZED'
            ],
            'prevention_rule' => 'VERIFY dependency chain and execution order before placing code'
        ]
    ],
    'mandatory_pre_change_analysis' => [
        'file_context_analysis' => [
            'step_1' => 'Identify file type: pure PHP, mixed PHP/HTML, CSS, JavaScript, or configuration',
            'step_2' => 'Map all includes: what this file includes and what files include this file',
            'step_3' => 'Understand execution context: when and how this code runs in request lifecycle',
            'step_4' => 'Verify variable scope: ensure all variables are defined and accessible',
            'step_5' => 'Check function availability: confirm all called functions are loaded before use'
        ],
        'integration_point_analysis' => [
            'php_html_integration' => 'How PHP generates HTML, where PHP blocks exist, output escaping requirements',
            'css_integration' => 'How styles are loaded, cascade order, responsive design impact',
            'javascript_integration' => 'DOM readiness, event handling, AJAX endpoints, data passing',
            'database_integration' => 'Connection handling, prepared statements, transaction context',
            'security_integration' => 'Authentication checks, input validation, output escaping'
        ]
    ],
    'mandatory_change_implementation_rules' => [
        'php_specific_rules' => [
            'preserve_php_tags' => 'NEVER break <?php opening or ?> closing tag pairs',
            'maintain_include_order' => 'Config → Database → Functions → Authentication → Content',
            'respect_variable_scope' => 'Understand global vs local scope, superglobal usage',
            'handle_errors_properly' => 'Use try/catch, check return values, log errors appropriately'
        ],
        'html_specific_rules' => [
            'preserve_html_structure' => 'Keep opening and closing HTML tags balanced and properly nested',
            'maintain_semantic_markup' => 'Use appropriate HTML elements for content structure',
            'preserve_accessibility' => 'Maintain ARIA attributes, form labels, alt text',
            'respect_responsive_design' => 'Don\'t break mobile/desktop layout compatibility'
        ],
        'css_specific_rules' => [
            'respect_css_blocks' => 'Keep CSS within <style> tags or external .css files',
            'maintain_specificity' => 'Understand cascade, inheritance, and selector weight',
            'preserve_responsive_breakpoints' => 'Don\'t break existing media queries',
            'avoid_style_conflicts' => 'Use namespacing to prevent cross-component interference'
        ],
        'javascript_specific_rules' => [
            'isolate_js_blocks' => 'Keep JavaScript within <script> tags or external .js files',
            'ensure_dom_readiness' => 'Verify DOM elements exist before JavaScript manipulates them',
            'handle_data_exchange' => 'Use json_encode() for PHP-to-JavaScript data transfer',
            'maintain_event_handling' => 'Don\'t break existing event listeners and handlers'
        ]
    ],
    'mandatory_post_change_verification' => [
        'syntax_validation' => [
            'php_syntax' => 'Run: php -l filename.php to check PHP syntax',
            'html_validation' => 'Verify HTML structure is valid and complete',
            'css_validation' => 'Check CSS syntax and selector validity',
            'javascript_validation' => 'Verify JavaScript syntax and DOM references'
        ],
        'functional_testing' => [
            'feature_testing' => 'Test actual functionality, not just syntax correctness',
            'integration_testing' => 'Verify the change doesn\'t break other application parts',
            'security_testing' => 'Check for XSS, SQL injection, authentication bypass',
            'performance_testing' => 'Ensure change doesn\'t significantly impact performance'
        ],
        'error_monitoring' => [
            'error_log_check' => 'Monitor PHP error logs for new fatal/warning/notice errors',
            'browser_console_check' => 'Check browser console for JavaScript errors',
            'network_monitoring' => 'Verify AJAX requests still work correctly',
            'database_monitoring' => 'Check for database connection or query errors'
        ]
    ],
    'emergency_rollback_protocol' => [
        'immediate_rollback_triggers' => [
            'white_screen_of_death' => 'Page shows blank white screen - FATAL PHP ERROR',
            'parse_error' => 'PHP parse error messages - SYNTAX ERROR',
            'javascript_console_errors' => 'New JavaScript errors in browser console',
            'broken_functionality' => 'Any feature stops working after the change',
            'security_vulnerability' => 'New XSS, SQL injection, or authentication bypass'
        ],
        'rollback_procedure' => [
            'step_1_immediate_action' => 'STOP all further changes immediately',
            'step_2_restore_backup' => 'Restore exact backup from quarantine/backup location',
            'step_3_verify_restoration' => 'Test that functionality is restored completely',
            'step_4_analyze_failure' => 'Analyze what integration requirement was violated',
            'step_5_plan_correction' => 'Plan new approach that respects ALL integration requirements'
        ]
    ]
];

// ============================================================================
// SECTION 8: FINAL EXECUTION PROTOCOL WITH INTEGRATION SAFETY
// ============================================================================

$final_execution_protocol = [
    'phase_0_integration_safety_setup' => [
        'action' => 'Establish comprehensive integration safety before ANY changes',
        'steps' => [
            '1' => 'Create complete application backup with rollback capability',
            '2' => 'Set up error monitoring and logging for all contexts',
            '3' => 'Establish baseline functionality testing for all contexts',
            '4' => 'Document current file dependencies and integration points',
            '5' => 'Set up quarantine system with detailed change logging',
            '6' => 'Test rollback procedures to ensure they work perfectly'
        ],
        'success_criteria' => 'Complete safety net established with proven rollback capability'
    ],
    'ai_assistant_integration_requirements' => [
        'before_every_change' => [
            'think_like_lamp_developer' => 'Analyze change from full-stack web development perspective',
            'understand_file_context' => 'Know exactly how this file fits into application architecture',
            'map_dependencies' => 'Understand what this file needs and what needs this file',
            'consider_execution_order' => 'Verify code placement respects dependency loading order',
            'analyze_integration_points' => 'Understand how PHP, HTML, CSS, JS interact in this file'
        ],
        'during_every_change' => [
            'respect_code_boundaries' => 'Keep each language in its proper context and blocks',
            'maintain_structural_integrity' => 'Never break essential tags, includes, or dependencies',
            'preserve_security_context' => 'Maintain input validation, output escaping, authentication',
            'follow_best_practices' => 'Use proper coding standards for each language involved',
            'maintain_error_handling' => 'Preserve existing error handling and add appropriate new handling'
        ],
        'after_every_change' => [
            'validate_all_syntax' => 'Check PHP, HTML, CSS, JavaScript syntax is valid',
            'test_functionality' => 'Verify actual feature functionality, not just syntax',
            'monitor_error_logs' => 'Check for new errors in PHP logs and browser console',
            'test_integration_points' => 'Verify interaction between different code languages still works',
            'verify_security' => 'Ensure no new vulnerabilities introduced'
        ]
    ],
    'context_specific_safety_enforcement' => [
        'admin_context_safety' => [
            'preserve_admin_functionality' => 'All admin features must continue working identically',
            'maintain_bootstrap_integration' => 'Don\'t break Bootstrap CSS/JS functionality',
            'preserve_datatables_integration' => 'Keep DataTables sorting, filtering, pagination working',
            'maintain_summernote_integration' => 'Preserve rich text editor functionality',
            'keep_fontawesome_integration' => 'Don\'t break icon display and functionality'
        ],
        'accounts_system_safety' => [
            'preserve_authentication_flow' => 'Login, logout, registration must work identically',
            'maintain_session_handling' => 'Session management must remain functional',
            'preserve_email_templates' => 'Email sending and template rendering must work',
            'keep_password_security' => 'Password hashing and validation must remain secure'
        ],
        'blog_system_safety' => [
            'preserve_content_display' => 'Blog posts, comments, categories must display correctly',
            'maintain_gallery_functionality' => 'Image galleries and media handling must work',
            'keep_navigation_working' => 'Blog navigation and filtering must function',
            'preserve_brand_variables' => 'Custom CSS variables and styling must remain intact'
        ],
        'client_portal_safety' => [
            'preserve_dashboard_functionality' => 'Client dashboard features must work identically',
            'maintain_scss_compilation' => 'SCSS structure and compilation must remain functional',
            'keep_vendor_libraries' => 'Local Bootstrap and other libraries must work',
            'preserve_form_functionality' => 'Client forms and interactions must work perfectly'
        ],
        'universal_shared_safety' => [
            'preserve_config_files' => 'Universal config files must never be broken',
            'maintain_shared_functions' => 'Shared utility functions must remain available',
            'keep_cross_context_assets' => 'Assets used by multiple contexts must remain functional',
            'preserve_seo_integration' => 'SEO and meta tag functionality must work across all contexts'
        ]
    ]
];

echo "CSS/JS Cleanup and Standardization Plan loaded successfully.\n";
echo "Use the variables above to access detailed planning information.\n";
echo "Last updated: " . date('Y-m-d H:i:s') . "\n";

/*
 * USAGE INSTRUCTIONS FOR DEVELOPERS:
 * 
 * 1. Review $current_state for complete inventory of existing files
 * 2. Follow $cleanup_plan phases in order - do not skip phases
 * 3. Use $integration_plan when adding new applications  
 * 4. Follow $optimization_best_practices for all CSS/JS work
 * 5. Update this document when making structural changes
 * 
 * SAFETY RULES:
 * - Always backup before making changes
 * - Test functionality after each major change
 * - Never override Bootstrap or Font Awesome core classes
 * - Use specific selectors instead of !important
 * - Maintain backward compatibility with canonical-admin.php standards
 */

// ============================================================================
// SECTION 9: APPLICATION TYPE-SPECIFIC INTEGRATION PATTERNS
// ============================================================================

$application_type_patterns = [
    'dashboard_applications' => [
        'characteristics' => [
            'primary_features' => ['Statistics widgets', 'Data visualization', 'Summary cards', 'Quick actions'],
            'typical_layout' => 'Grid-based widget layout with responsive columns',
            'data_requirements' => 'Real-time or cached statistical data',
            'user_interaction' => 'Minimal forms, mostly data consumption'
        ],
        'integration_requirements' => [
            'css_patterns' => [
                'widget_structure' => [
                    'container' => '.dashboard-widget or .stat-card',
                    'header' => '.widget-header with icon and title',
                    'body' => '.widget-body with primary content',
                    'footer' => '.widget-footer with meta information',
                    'responsive' => 'Use Bootstrap grid classes (col-md-6, col-lg-4, etc.)'
                ],
                'styling_requirements' => [
                    'consistent_spacing' => 'Use standard Bootstrap spacing utilities (mb-3, p-4)',
                    'icon_integration' => 'Font Awesome icons in widget headers',
                    'color_scheme' => 'Use admin color variables for consistency',
                    'hover_effects' => 'Subtle hover effects for interactive widgets'
                ]
            ],
            'javascript_patterns' => [
                'chart_integration' => [
                    'library' => 'Chart.js (already included in admin)',
                    'responsive_charts' => 'Use maintainAspectRatio: false for mobile',
                    'color_consistency' => 'Use admin color scheme in charts',
                    'update_mechanism' => 'Implement AJAX refresh for real-time data'
                ],
                'widget_interactions' => [
                    'click_actions' => 'Navigate to detailed views on widget click',
                    'refresh_buttons' => 'Individual widget refresh functionality',
                    'expand_collapse' => 'Optional expand/collapse for complex widgets'
                ]
            ]
        ],
        'database_patterns' => [
            'aggregation_queries' => [
                'count_queries' => 'SELECT COUNT(*) for basic statistics',
                'grouped_data' => 'GROUP BY for categorical breakdowns',
                'date_ranges' => 'Use DATE functions for time-based analytics',
                'performance' => 'Consider caching for expensive aggregations'
            ],
            'real_time_considerations' => [
                'cache_strategy' => 'Cache expensive queries with appropriate TTL',
                'update_frequency' => 'Balance real-time needs with performance',
                'incremental_updates' => 'Update only changed data where possible'
            ]
        ]
    ],

    'form_heavy_applications' => [
        'characteristics' => [
            'primary_features' => ['Complex forms', 'Multi-step processes', 'File uploads', 'Validation'],
            'typical_layout' => 'Single or multi-column forms with logical grouping',
            'data_requirements' => 'Extensive user input with validation',
            'user_interaction' => 'Heavy form interaction, validation feedback'
        ],
        'integration_requirements' => [
            'form_structure' => [
                'bootstrap_classes' => [
                    'form_wrapper' => '.card .card-body for form containers',
                    'form_groups' => '.mb-3 for field spacing',
                    'labels' => '.form-label for consistent label styling',
                    'inputs' => '.form-control for text inputs, .form-select for dropdowns',
                    'buttons' => 'Use canonical button patterns (btn-success, btn-outline-secondary)'
                ],
                'validation_styling' => [
                    'error_states' => '.is-invalid class for fields with errors',
                    'success_states' => '.is-valid class for validated fields',
                    'feedback_text' => '.invalid-feedback and .valid-feedback for messages',
                    'field_requirements' => 'Use required attribute and proper validation'
                ]
            ],
            'multi_step_forms' => [
                'stepper_component' => [
                    'structure' => '.stepper-container with .stepper-step elements',
                    'active_state' => '.active class for current step',
                    'completed_state' => '.completed class for finished steps',
                    'navigation' => 'Previous/Next buttons with step validation'
                ],
                'data_persistence' => [
                    'session_storage' => 'Store incomplete form data in session',
                    'progressive_saving' => 'Save completed steps to database',
                    'validation_per_step' => 'Validate each step before progression'
                ]
            ],
            'file_upload_patterns' => [
                'upload_interface' => [
                    'drag_drop' => 'Bootstrap file input with drag-and-drop styling',
                    'progress_indicators' => 'Progress bars for upload status',
                    'file_preview' => 'Preview uploaded files before submission',
                    'multiple_files' => 'Support for multiple file selection'
                ],
                'backend_handling' => [
                    'validation' => 'File type, size, and security validation',
                    'storage' => 'Organized file storage with proper naming',
                    'database_tracking' => 'Track uploaded files in database',
                    'cleanup' => 'Remove orphaned files from failed uploads'
                ]
            ]
        ],
        'javascript_requirements' => [
            'form_validation' => [
                'client_side' => 'Bootstrap validation classes and custom validation',
                'server_side' => 'Always validate on server side as well',
                'real_time_feedback' => 'Validate fields as user types (debounced)',
                'ajax_submission' => 'Submit forms via AJAX for better UX'
            ],
            'dynamic_forms' => [
                'add_remove_fields' => 'Dynamic field addition/removal',
                'conditional_fields' => 'Show/hide fields based on selections',
                'auto_complete' => 'Implement autocomplete for relevant fields',
                'save_draft' => 'Auto-save functionality for long forms'
            ]
        ]
    ],

    'table_heavy_applications' => [
        'characteristics' => [
            'primary_features' => ['Data listing', 'Sorting', 'Filtering', 'Pagination', 'Bulk actions'],
            'typical_layout' => 'Card container with table, filters, and pagination',
            'data_requirements' => 'Large datasets with efficient querying',
            'user_interaction' => 'Sorting, filtering, selecting, and bulk operations'
        ],
        'integration_requirements' => [
            'canonical_table_structure' => [
                'required_structure' => [
                    'card_wrapper' => '.card with .card-header and .card-body',
                    'table_wrapper' => '.table-responsive .table',
                    'header_row' => 'Sortable column headers with sort indicators',
                    'data_rows' => 'Consistent row styling with proper alignment',
                    'actions_column' => 'Last column with .table-dropdown structure'
                ],
                'sorting_implementation' => [
                    'sort_links' => 'Column headers as clickable sort links',
                    'sort_indicators' => 'Triangle icons (▲ ▼) for sort direction',
                    'sort_persistence' => 'Maintain sort state in URL parameters',
                    'multi_column_sort' => 'Optional: Support multiple column sorting'
                ]
            ],
            'filtering_interface' => [
                'filter_layout' => [
                    'filter_row' => 'Horizontal filter bar above table',
                    'filter_inputs' => 'Consistent input styling with .form-control',
                    'filter_buttons' => 'Apply/Clear buttons with proper styling',
                    'advanced_filters' => 'Collapsible advanced filter section'
                ],
                'filter_types' => [
                    'text_search' => 'Global search across multiple columns',
                    'dropdown_filters' => 'Category/status dropdown filters',
                    'date_ranges' => 'Date range pickers for time-based filtering',
                    'numeric_ranges' => 'Min/max inputs for numeric filtering'
                ]
            ],
            'pagination_component' => [
                'bootstrap_pagination' => [
                    'structure' => '.pagination .pagination-sm for compact styling',
                    'page_info' => 'Show "X of Y results" information',
                    'page_size_options' => 'Allow users to change results per page',
                    'jump_to_page' => 'Quick page number input for large datasets'
                ],
                'performance_considerations' => [
                    'limit_offset' => 'Efficient LIMIT/OFFSET queries',
                    'count_optimization' => 'Optimize total count queries',
                    'cursor_pagination' => 'Consider cursor-based pagination for very large datasets'
                ]
            ]
        ],
        'bulk_actions' => [
            'selection_interface' => [
                'select_all' => 'Header checkbox to select all visible rows',
                'individual_select' => 'Checkbox in each row for selection',
                'selection_count' => 'Display count of selected items',
                'select_across_pages' => 'Option to select all items across pages'
            ],
            'action_implementation' => [
                'action_dropdown' => 'Dropdown menu with available bulk actions',
                'confirmation_dialogs' => 'Confirm destructive actions',
                'progress_indication' => 'Show progress for long-running operations',
                'result_feedback' => 'Display success/error messages after operations'
            ]
        ]
    ],

    'communication_applications' => [
        'characteristics' => [
            'primary_features' => ['Messaging', 'Comments', 'Notifications', 'Email integration'],
            'typical_layout' => 'Threaded conversations with rich text editing',
            'data_requirements' => 'Message storage with relationships and attachments',
            'user_interaction' => 'Text composition, file attachments, real-time updates'
        ],
        'integration_requirements' => [
            'message_threading' => [
                'thread_structure' => [
                    'conversation_container' => '.conversation-thread',
                    'message_item' => '.message-item with sender info and timestamp',
                    'message_content' => '.message-content with rich text support',
                    'message_meta' => '.message-meta with sender, time, status',
                    'attachment_display' => '.message-attachments for file previews'
                ],
                'visual_hierarchy' => [
                    'sender_identification' => 'Clear visual distinction between senders',
                    'timestamp_formatting' => 'Consistent timestamp display',
                    'read_status' => 'Visual indicators for read/unread messages',
                    'reply_threading' => 'Indentation or connection lines for replies'
                ]
            ],
            'rich_text_integration' => [
                'summernote_setup' => [
                    'editor_config' => 'Use admin Summernote configuration',
                    'toolbar_customization' => 'Appropriate toolbar for messaging context',
                    'file_upload' => 'Integrate file upload with Summernote',
                    'mention_support' => 'Optional: User mention functionality'
                ],
                'content_processing' => [
                    'html_sanitization' => 'Sanitize rich text content for security',
                    'link_preview' => 'Optional: Generate previews for links',
                    'emoji_support' => 'Emoji picker and rendering',
                    'formatting_preservation' => 'Maintain formatting in storage and display'
                ]
            ],
            'notification_system' => [
                'notification_types' => [
                    'new_message' => 'Notify when new messages are received',
                    'mention_alerts' => 'Special alerts for user mentions',
                    'status_updates' => 'Notify on message status changes',
                    'system_notifications' => 'Administrative notifications'
                ],
                'delivery_methods' => [
                    'in_app' => 'Admin interface notification badge/dropdown',
                    'email_digest' => 'Email notifications for important messages',
                    'real_time' => 'Optional: WebSocket or polling for real-time updates'
                ]
            ]
        ],
        'attachment_handling' => [
            'upload_interface' => [
                'drag_drop_zone' => 'Drag and drop attachment area',
                'file_picker' => 'Traditional file input as fallback',
                'progress_display' => 'Upload progress indicators',
                'file_preview' => 'Preview attachments before sending'
            ],
            'file_management' => [
                'storage_organization' => 'Organized file storage by conversation/date',
                'file_security' => 'Access control for attachment downloads',
                'file_cleanup' => 'Remove orphaned files from deleted messages',
                'virus_scanning' => 'Optional: Virus scanning for uploaded files'
            ]
        ]
    ]
];

// ============================================================================
// SECTION 10: DATABASE INTEGRATION BEST PRACTICES
// ============================================================================

$database_integration_standards = [
    'table_naming_conventions' => [
        'primary_standard' => '{application_name}_{table_purpose}',
        'examples' => [
            'tickets_tickets' => 'Main tickets table',
            'tickets_comments' => 'Ticket comments',
            'tickets_uploads' => 'Ticket file attachments',
            'tickets_categories' => 'Ticket categories',
            'tickets_status_history' => 'Status change tracking'
        ],
        'existing_table_analysis' => [
            'current_naming_check' => 'Identify tables that don\'t follow convention',
            'impact_assessment' => 'Check if other systems reference these tables',
            'migration_planning' => 'Plan table renames if needed for consistency',
            'foreign_key_updates' => 'Update all foreign key references'
        ],
        'benefits_of_prefixing' => [
            'namespace_separation' => 'Prevents conflicts between applications',
            'clear_ownership' => 'Immediately identifies which app owns the table',
            'database_organization' => 'Logical grouping in database management tools',
            'scalability' => 'Easier to manage as more applications are added'
        ]
    ],

    'table_design_patterns' => [
        'primary_entity_tables' => [
            'required_fields' => [
                'id' => 'INT AUTO_INCREMENT PRIMARY KEY',
                'created_at' => 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP',
                'updated_at' => 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP',
                'created_by' => 'INT (foreign key to accounts.id)',
                'status' => 'VARCHAR or ENUM for record status'
            ],
            'optional_common_fields' => [
                'deleted_at' => 'TIMESTAMP NULL for soft deletes',
                'version' => 'INT for optimistic locking',
                'metadata' => 'JSON for flexible additional data'
            ]
        ],
        'relationship_tables' => [
            'naming_pattern' => '{parent_table}_{child_table} or {entity1}_{entity2}',
            'required_fields' => [
                'parent_id' => 'Foreign key to parent table',
                'child_id' => 'Foreign key to child table',
                'created_at' => 'Timestamp of relationship creation',
                'created_by' => 'Who created the relationship'
            ],
            'composite_keys' => 'Use (parent_id, child_id) as primary key for many-to-many'
        ],
        'audit_tables' => [
            'purpose' => 'Track changes to important entities',
            'naming_pattern' => '{main_table}_history or {main_table}_audit',
            'required_fields' => [
                'id' => 'Primary key for audit record',
                'entity_id' => 'ID of the main record being audited',
                'action' => 'INSERT, UPDATE, DELETE',
                'old_values' => 'JSON of previous values',
                'new_values' => 'JSON of new values',
                'changed_by' => 'User who made the change',
                'changed_at' => 'Timestamp of change'
            ]
        ]
    ],

    'indexing_strategies' => [
        'primary_indexes' => [
            'primary_key' => 'Automatic index on PRIMARY KEY',
            'foreign_keys' => 'Index all foreign key columns',
            'unique_constraints' => 'Index columns with UNIQUE constraints'
        ],
        'performance_indexes' => [
            'search_columns' => 'Index columns used in WHERE clauses',
            'sort_columns' => 'Index columns used in ORDER BY',
            'join_columns' => 'Index columns used in JOINs',
            'composite_indexes' => 'Multi-column indexes for complex queries'
        ],
        'admin_specific_indexes' => [
            'status_filters' => 'Index status columns for admin filtering',
            'date_ranges' => 'Index date columns for admin reporting',
            'user_assignments' => 'Index user assignment columns',
            'full_text_search' => 'FULLTEXT indexes for content search'
        ]
    ],

    'query_optimization_patterns' => [
        'pagination_queries' => [
            'limit_offset' => [
                'pattern' => 'SELECT * FROM table ORDER BY id LIMIT ? OFFSET ?',
                'performance_note' => 'OFFSET becomes slower with higher values',
                'recommendation' => 'Use cursor-based pagination for large datasets'
            ],
            'cursor_pagination' => [
                'pattern' => 'SELECT * FROM table WHERE id > ? ORDER BY id LIMIT ?',
                'benefits' => 'Consistent performance regardless of page number',
                'implementation' => 'Use last_id from previous page as cursor'
            ]
        ],
        'search_queries' => [
            'simple_search' => [
                'pattern' => 'WHERE column LIKE CONCAT("%", ?, "%")',
                'index_usage' => 'Can use index if wildcard not at beginning',
                'performance' => 'Good for small to medium datasets'
            ],
            'fulltext_search' => [
                'pattern' => 'WHERE MATCH(column1, column2) AGAINST(? IN BOOLEAN MODE)',
                'index_requirement' => 'Requires FULLTEXT index',
                'benefits' => 'Better performance and relevance for text search'
            ]
        ],
        'filtering_queries' => [
            'multi_filter' => [
                'pattern' => 'WHERE status = ? AND category_id = ? AND created_at >= ?',
                'index_optimization' => 'Composite index on (status, category_id, created_at)',
                'parameter_binding' => 'Always use prepared statements'
            ],
            'optional_filters' => [
                'dynamic_where' => 'Build WHERE clause based on provided filters',
                'parameter_arrays' => 'Use arrays to manage dynamic parameters',
                'sql_injection_prevention' => 'Ensure all dynamic parts are parameterized'
            ]
        ]
    ],

    'data_integrity_standards' => [
        'foreign_key_constraints' => [
            'always_define' => 'Define foreign key constraints for referential integrity',
            'cascade_rules' => [
                'ON DELETE CASCADE' => 'When parent is deleted, delete children',
                'ON DELETE SET NULL' => 'When parent is deleted, set foreign key to NULL',
                'ON DELETE RESTRICT' => 'Prevent deletion if children exist'
            ],
            'admin_considerations' => 'Choose cascade rules that support admin functionality'
        ],
        'data_validation' => [
            'database_level' => [
                'NOT NULL constraints' => 'Enforce required fields at database level',
                'CHECK constraints' => 'Validate data ranges and formats',
                'UNIQUE constraints' => 'Prevent duplicate values where appropriate'
            ],
            'application_level' => [
                'php_validation' => 'Validate data in PHP before database insertion',
                'sanitization' => 'Sanitize input data to prevent injection',
                'business_rules' => 'Enforce complex business rules in application logic'
            ]
        ]
    ]
];

// ============================================================================
// SECTION 11: COMMON INTEGRATION PATTERNS AND SOLUTIONS
// ============================================================================

$common_integration_patterns = [
    'authentication_integration' => [
        'admin_auth_standard' => [
            'include_pattern' => 'include_once "../assets/includes/main.php"',
            'automatic_benefits' => [
                'pdo_connection' => 'Database connection automatically available',
                'auth_check' => 'Admin authentication automatically enforced',
                'user_data' => '$account_loggedin variable available',
                'role_checking' => 'Role-based access control available'
            ],
            'session_management' => [
                'session_variables' => '$_SESSION["id"], $_SESSION["loggedin"], $_SESSION["role"]',
                'user_object' => '$account_loggedin array with full user data',
                'role_functions' => 'has_role() and get_user_role() functions available'
            ]
        ],
        'permission_patterns' => [
            'page_level' => [
                'admin_only' => 'Automatic with main.php include',
                'role_specific' => 'Use has_role(["Admin", "Editor"]) for granular control',
                'feature_specific' => 'Check permissions for specific features within pages'
            ],
            'action_level' => [
                'crud_permissions' => 'Check permissions before create, update, delete operations',
                'data_access' => 'Filter data based on user role and permissions',
                'ui_elements' => 'Show/hide UI elements based on permissions'
            ]
        ]
    ],

    'navigation_integration' => [
        'admin_menu_structure' => [
            'main_navigation' => 'Automatically included in template_admin_header()',
            'submenu_items' => 'Define submenu items for application sections',
            'active_state' => 'Use $selected and $selected_child parameters',
            'badge_counts' => 'Add notification badges for unread items'
        ],
        'breadcrumb_patterns' => [
            'simple_breadcrumb' => 'Home > Application > Current Page',
            'dynamic_breadcrumb' => 'Include entity names for edit/view pages',
            'implementation' => 'Use breadcrumb parameter in template_admin_header()'
        ]
    ],

    'error_handling_patterns' => [
        'user_friendly_errors' => [
            'success_messages' => [
                'pattern' => 'Use .msg.success class for positive feedback',
                'examples' => 'Record saved successfully, Email sent, File uploaded',
                'display_method' => 'Show at top of page or in modal'
            ],
            'error_messages' => [
                'pattern' => 'Use .msg.error class for error feedback',
                'examples' => 'Validation errors, Database errors, Permission denied',
                'user_safety' => 'Never expose sensitive system information'
            ],
            'warning_messages' => [
                'pattern' => 'Use .msg.warning class for warnings',
                'examples' => 'Unsaved changes, Deprecated features, Quota warnings'
            ]
        ],
        'developer_error_handling' => [
            'exception_handling' => [
                'try_catch_blocks' => 'Wrap database operations in try-catch',
                'logging' => 'Log errors for debugging without exposing to users',
                'graceful_degradation' => 'Provide fallback functionality when possible'
            ],
            'validation_patterns' => [
                'input_validation' => 'Validate all user inputs on both client and server',
                'data_sanitization' => 'Sanitize data before database storage',
                'output_escaping' => 'Escape all output to prevent XSS'
            ]
        ]
    ],

    'ajax_integration_patterns' => [
        'standard_ajax_structure' => [
            'endpoint_pattern' => 'Create separate PHP files for AJAX operations',
            'response_format' => 'Use consistent JSON response format',
            'error_handling' => 'Include error handling in AJAX responses',
            'csrf_protection' => 'Include CSRF tokens in AJAX requests'
        ],
        'common_ajax_operations' => [
            'form_submission' => [
                'validation' => 'Client-side validation before submission',
                'progress_indication' => 'Show loading state during submission',
                'response_handling' => 'Handle both success and error responses',
                'form_reset' => 'Reset form or redirect after successful submission'
            ],
            'data_loading' => [
                'lazy_loading' => 'Load data on demand for better performance',
                'infinite_scroll' => 'Load more data as user scrolls',
                'auto_refresh' => 'Periodically refresh data for real-time updates'
            ],
            'quick_actions' => [
                'status_toggles' => 'Quick status changes without page reload',
                'bulk_operations' => 'Process multiple items with progress indication',
                'inline_editing' => 'Edit data directly in tables or lists'
            ]
        ]
    ],

    'file_upload_patterns' => [
        'secure_upload_handling' => [
            'file_validation' => [
                'type_checking' => 'Validate file types by extension and MIME type',
                'size_limits' => 'Enforce file size limits appropriate for use case',
                'content_scanning' => 'Scan file contents for security threats',
                'filename_sanitization' => 'Sanitize filenames to prevent directory traversal'
            ],
            'storage_organization' => [
                'directory_structure' => 'Organize uploads by date, user, or application',
                'file_naming' => 'Use UUIDs or timestamps to prevent conflicts',
                'access_control' => 'Implement proper access controls for uploaded files',
                'cleanup_procedures' => 'Remove orphaned files and old uploads'
            ]
        ],
        'user_experience_patterns' => [
            'drag_drop_interface' => [
                'visual_feedback' => 'Clear visual indication of drop zones',
                'progress_indication' => 'Show upload progress and completion',
                'error_handling' => 'Display clear error messages for failed uploads',
                'multiple_files' => 'Support multiple file selection and upload'
            ],
            'file_management' => [
                'preview_functionality' => 'Show previews for images and documents',
                'download_links' => 'Provide secure download links for uploaded files',
                'delete_functionality' => 'Allow users to remove uploaded files',
                'file_organization' => 'Organize files in logical groups or folders'
            ]
        ]
    ]
];

echo "Enhanced canonical plan with application-specific patterns loaded successfully.\n";
echo "This plan now includes comprehensive guidance for different application types and common integration scenarios.\n";
?>