<?php
/* 
 * Settings Dashboard - Comprehensive Configuration Management
 * 
 * SYSTEM: GWS Universal Hybrid App - Admin Panel
 * FILE: settings_dash.php
 * LOCATION: /public_html/admin/settings/
 * PURPOSE: Central settings management dashboard with completion tracking
 * DETAILED DESCRIPTION:
 * This comprehensive dashboard provides oversight of all system settings,
 * tracks configuration completion, monitors page integration status,
 * and offers quick access to all settings management interfaces.
 * 
 * FEATURES:
 * - Settings completion tracking and statistics
 * - Page integration status monitoring  
 * - Quick actions for all settings files
 * - Action items for incomplete configurations
 * - Content analysis and scanning tools
 * - Visual progress indicators
 * - Manual completion toggles
 * 
 * REQUIRED FILES: 
 * - /public_html/assets/includes/main.php
 * - Database tables: settings_status, page_completion_status
 * CREATED: 2025-08-07
 * UPDATED: 2025-08-14
 * VERSION: 2.0
 * PRODUCTION: [IN DEVELOPMENT]
 */

include_once '../assets/includes/main.php';

// Security check for admin/editor/developer access
if (!isset($_SESSION['admin_role']) || !in_array($_SESSION['admin_role'], ['Admin', 'Editor', 'Developer']))
{
    header('Location: ../index.php');
    exit();
}

// Handle AJAX requests for page completion toggles
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action'])) {
    if ($_POST['action'] === 'toggle_page_completion') {
        $page_path = $_POST['page_path'];
        $is_complete = $_POST['is_complete'] === 'true' ? 1 : 0;
        
        $stmt = $pdo->prepare('INSERT INTO page_completion_status (page_path, page_name, is_complete) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE is_complete = ?, last_checked = CURRENT_TIMESTAMP');
        $stmt->execute([$page_path, $_POST['page_name'], $is_complete, $is_complete]);
        
        echo json_encode(['success' => true]);
        exit;
    }
    
    if ($_POST['action'] === 'scan_content') {
        $results = scanPageContent($_POST['page_path']);
        echo json_encode($results);
        exit;
    }
    
    if ($_POST['action'] === 'toggle_dev_mode') {
        $header_file = __DIR__ . '/../../assets/includes/header.php';
        $header_content = file_get_contents($header_file);
        
        // Check current state and toggle
        if (strpos($header_content, '// include_once __DIR__ . \'/content_highlighter.php\';') !== false) {
            // Currently disabled, enable it
            $new_content = str_replace(
                '// include_once __DIR__ . \'/content_highlighter.php\';',
                'include_once __DIR__ . \'/content_highlighter.php\';',
                $header_content
            );
            $new_state = 'enabled';
        } else {
            // Currently enabled, disable it
            $new_content = str_replace(
                'include_once __DIR__ . \'/content_highlighter.php\';',
                '// include_once __DIR__ . \'/content_highlighter.php\';',
                $header_content
            );
            $new_state = 'disabled';
        }
        
        file_put_contents($header_file, $new_content);
        echo json_encode(['success' => true, 'state' => $new_state]);
        exit;
    }
    
    if ($_POST['action'] === 'add_page_mapping') {
        try {
            $page_path = trim($_POST['page_path']);
            $display_name = trim($_POST['display_name']);
            $settings_file = trim($_POST['settings_file']);
            $field_configs = json_decode($_POST['field_configs'], true);
            
            if (empty($page_path) || empty($display_name)) {
                throw new Exception('Page path and display name are required');
            }
            
            // Load current mapping
            $mapping_file = __DIR__ . '/page_settings_mapping.php';
            $current_mapping = require $mapping_file;
            
            // Create new page configuration
            $new_config = [
                'settings_files' => [
                    $settings_file => [
                        'path' => '../../assets/includes/settings/' . $settings_file,
                        'type' => 'php_variable',
                        'variable' => str_replace('.php', '', $settings_file) . '_content',
                        'structure' => $field_configs
                    ]
                ],
                'display_name' => $display_name
            ];
            
            // Add to mapping
            $current_mapping[$page_path] = $new_config;
            
            // Write back to file
            $mapping_content = "<?php\n/**\n * Page Settings Mapping\n * Maps each page to its corresponding settings files and structure\n */\n\nreturn " . var_export($current_mapping, true) . ";";
            
            if (file_put_contents($mapping_file, $mapping_content)) {
                echo json_encode(['success' => true, 'message' => 'Page mapping added successfully']);
            } else {
                throw new Exception('Could not write to mapping file');
            }
        } catch (Exception $e) {
            echo json_encode(['success' => false, 'error' => $e->getMessage()]);
        }
        exit;
    }
}

// Settings files configuration
$settings_files = [
    'Site Settings' => ['file' => 'site_settings.php', 'category' => 'General', 'role' => 'Admin'],
    'Branding Settings' => ['file' => 'branding_settings.php', 'category' => 'General', 'role' => 'Admin', 'type' => 'branding'],
    'Content Settings' => ['file' => 'content_settings.php', 'category' => 'Content', 'role' => 'Admin'],
    'SEO Settings' => ['file' => 'seo_settings.php', 'category' => 'Marketing', 'role' => 'Admin'],
    'Meta Tag Settings' => ['file' => 'meta_tag_settings.php', 'category' => 'Marketing', 'role' => 'Admin'],
    'Shop Settings' => ['file' => 'shop_settings.php', 'category' => 'E-commerce', 'role' => 'Admin'],
    'Blog Settings' => ['file' => 'blog_settings.php', 'category' => 'Content', 'role' => 'Admin'],
    'Contact Settings' => ['file' => 'contact_settings.php', 'category' => 'General', 'role' => 'Admin'],
    'Account Settings' => ['file' => 'account_settings.php', 'category' => 'Users', 'role' => 'Admin'],
    'Accounts Settings' => ['file' => 'accounts_settings.php', 'category' => 'Users', 'role' => 'Admin'],
    'Public Settings' => ['file' => 'public_settings.php', 'category' => 'General', 'role' => 'Admin'],
    'Template Settings' => ['file' => 'template_settings.php', 'category' => 'Design', 'role' => 'Admin'],
    'Public Image Settings' => ['file' => 'public_image_settings.php', 'category' => 'Design', 'role' => 'Admin'],
    'System Settings' => ['file' => 'system_settings.php', 'category' => 'System', 'role' => 'Admin'],
    'Developer Settings' => ['file' => 'dev_settings.php', 'category' => 'System', 'role' => 'Developer'],
    'Database Configuration' => ['file' => '../../../private/gws-universal-config.php', 'category' => 'System', 'role' => 'Developer', 'type' => 'config'],
    'Invoice Settings' => ['file' => 'invoice_settings.php', 'category' => 'Business', 'role' => 'Admin'],
    'Documents Settings' => ['file' => 'documents_settings.php', 'category' => 'Business', 'role' => 'Admin'],
    
    // Application Configurations
    'Shop System Config' => ['file' => 'app_config.php?app=shop_system', 'category' => 'Applications', 'role' => 'Admin', 'type' => 'app_config'],
    'Blog System Config' => ['file' => 'app_config.php?app=blog_system', 'category' => 'Applications', 'role' => 'Admin', 'type' => 'app_config'],
    'Accounts System Config' => ['file' => 'app_config.php?app=accounts_system', 'category' => 'Applications', 'role' => 'Admin', 'type' => 'app_config']
];

// Public pages for integration tracking
$public_pages = [
    'index.php' => 'Homepage',
    'about.php' => 'About Page', 
    'contact.php' => 'Contact Page',
    'blog.php' => 'Blog Listing',
    'category.php' => 'Blog Category',
    'post.php' => 'Blog Post',
    'products.php' => 'Shop Products',
    'product.php' => 'Product Details',
    'cart.php' => 'Shopping Cart',
    'checkout.php' => 'Checkout',
    'myaccount.php' => 'My Account',
    'auth.php' => 'Authentication',
    'register.php' => 'Registration',
    'profile.php' => 'User Profile',
    'gallery.php' => 'Gallery',
    'search.php' => 'Search Results',
    'faqs.php' => 'FAQ Page',
    'policy-privacy.php' => 'Privacy Policy',
    'policy-terms.php' => 'Terms of Service',
    'policy-accessibility.php' => 'Accessibility Policy'
];

// Get settings completion statistics
$total_settings_files = count($settings_files);
$accessible_files = 0;
$existing_files = 0;
$configured_settings = 0;

// Check each settings file
foreach ($settings_files as $name => $info) {
    $file_path = $info['file'];
    $required_role = $info['role'] ?? 'Admin';
    
    // Check if user has access to this file based on role
    if ($_SESSION['admin_role'] === 'Developer' || 
        ($required_role === 'Admin' && in_array($_SESSION['admin_role'], ['Admin', 'Editor']))) {
        $accessible_files++;
        
        // Check if file actually exists
        if (file_exists($file_path)) {
            $existing_files++;
            $configured_settings++;
        }
    }
}

require_once 'page_detection.php';

// Get detected pages
$detected_pages = detectExistingPages();

// Get page completion statistics
$stmt = $pdo->query('SELECT COUNT(*) as total_pages, SUM(is_complete) as completed_pages FROM page_completion_status');
$page_stats = $stmt->fetch(PDO::FETCH_ASSOC);

// Initialize page completion status if not exists
foreach ($public_pages as $path => $name) {
    $stmt = $pdo->prepare('INSERT IGNORE INTO page_completion_status (page_path, page_name, is_complete) VALUES (?, ?, 0)');
    $stmt->execute([$path, $name]);
}

// Get updated page stats
$stmt = $pdo->query('SELECT COUNT(*) as total_pages, SUM(is_complete) as completed_pages FROM page_completion_status');
$page_stats = $stmt->fetch(PDO::FETCH_ASSOC);
$total_pages = $page_stats['total_pages'] ?: count($public_pages);
$completed_pages = $page_stats['completed_pages'] ?: 0;

// Get action items
$action_items = [];

// Check for settings that need attention
$incomplete_settings = [];
foreach ($settings_files as $name => $info) {
    if (!file_exists($info['file'])) {
        $incomplete_settings[] = $name . ' (File Missing)';
    }
}

// Get pages needing attention
$stmt = $pdo->query('SELECT page_name FROM page_completion_status WHERE is_complete = 0 ORDER BY page_name');
$incomplete_pages = $stmt->fetchAll(PDO::FETCH_COLUMN);

// Get recent activity
$stmt = $pdo->query('SELECT page_name, last_checked FROM page_completion_status WHERE last_checked > DATE_SUB(NOW(), INTERVAL 7 DAY) ORDER BY last_checked DESC LIMIT 5');
$recent_activity = $stmt->fetchAll(PDO::FETCH_ASSOC);

// Content scanning function
function scanPageContent($page_path) {
    $full_path = "../../../public_html/" . $page_path;
    if (!file_exists($full_path)) {
        return ['error' => 'Page not found'];
    }
    
    $content = file_get_contents($full_path);
    $issues = [];
    
    // Remove PHP code blocks to avoid false positives
    $content_no_php = preg_replace('/<\?php.*?\?>/s', '', $content);
    $content_no_php = preg_replace('/<\?.*?\?>/s', '', $content_no_php);
    
    // Look for actual hardcoded HTML content in common tags
    $html_tags = ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'span', 'div', 'a', 'li', 'td', 'th', 'label', 'button'];
    
    foreach ($html_tags as $tag) {
        // Match content between HTML tags that's not empty and substantial
        if (preg_match_all("/<{$tag}[^>]*>([^<>{]+)<\/{$tag}>/i", $content_no_php, $matches)) {
            foreach ($matches[1] as $text) {
                $text = trim($text);
                // Only flag substantial text content (not single words, numbers, or common UI elements)
                if (strlen($text) > 15 && 
                    !preg_match('/^[\d\s\-\.,:;!?()]+$/', $text) && // Not just numbers/punctuation
                    !in_array(strtolower($text), ['home', 'about', 'contact', 'login', 'logout', 'submit', 'cancel', 'save', 'edit', 'delete', 'back', 'next', 'previous', 'search']) && // Not common UI text
                    !preg_match('/^\$[a-zA-Z_]/', $text) && // Not variables
                    substr_count($text, ' ') >= 2) { // At least 3 words
                    
                    $issues[] = "Hardcoded content in <{$tag}>: " . substr($text, 0, 60) . (strlen($text) > 60 ? "..." : "");
                }
            }
        }
    }
    
    // Check for hardcoded text in value attributes (form inputs, etc.)
    if (preg_match_all('/value=["\']([^"\']{15,})["\']/', $content_no_php, $matches)) {
        foreach ($matches[1] as $text) {
            if (!preg_match('/^[\d\s\-\.@]+$/', $text) && // Not just numbers/emails
                !preg_match('/^\$[a-zA-Z_]/', $text)) { // Not variables
                $issues[] = "Hardcoded value attribute: " . substr($text, 0, 50) . (strlen($text) > 50 ? "..." : "");
            }
        }
    }
    
    // Check for hardcoded text in alt attributes
    if (preg_match_all('/alt=["\']([^"\']{10,})["\']/', $content_no_php, $matches)) {
        foreach ($matches[1] as $text) {
            if (!preg_match('/^\$[a-zA-Z_]/', $text)) { // Not variables
                $issues[] = "Hardcoded alt text: " . substr($text, 0, 50) . (strlen($text) > 50 ? "..." : "");
            }
        }
    }
    
    // Check for TODO comments
    if (preg_match_all('/TODO:?\s*(.+)/', $content, $matches)) {
        foreach ($matches[1] as $todo) {
            $issues[] = "TODO: " . trim($todo);
        }
    }
    
    return [
        'issues' => array_slice(array_unique($issues), 0, 15), // Remove duplicates and limit to 15 issues
        'total_issues' => count(array_unique($issues))
    ];
}

?>
<?php echo template_admin_header('Settings Dashboard', 'settings', 'dashboard'); ?>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0 text-gray-800">
                    <i class="fas fa-cogs"></i>&nbsp;&nbsp;Settings Management Dashboard
                </h1>
                <div class="d-flex gap-2">
                    <button onclick="scanAllPages()" class="btn btn-info btn-sm">
                        <i class="fas fa-search"></i>&nbsp;&nbsp;Scan All Pages
                    </button>
                    <button onclick="refreshDashboard()" class="btn btn-secondary btn-sm">
                        <i class="fas fa-sync-alt"></i>&nbsp;&nbsp;Refresh
                    </button>
                </div>
            </div>

            <!-- Warning Banner -->
            <div class="alert alert-warning d-flex align-items-center mb-4" role="alert">
                <i class="fas fa-exclamation-triangle me-3 fs-4"></i>
                <div>
                    <h5 class="alert-heading mb-1 text-warning">⚠️ SETTINGS CONFIGURATION DASHBOARD ⚠️</h5>
                    <p class="mb-0">
                        This dashboard helps track and manage all system settings. Use the completion toggles to mark pages as fully integrated with settings variables.
                        <strong>Always test changes in development first!</strong>
                    </p>
                </div>
            </div>

            <!-- Statistics Cards -->
            <div class="row mb-4">
                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-primary shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                        Settings Files (Your Role: <?php echo $_SESSION['admin_role']; ?>)
                                    </div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800"><?php echo $existing_files; ?> / <?php echo $accessible_files; ?></div>
                                    <div class="text-xs text-muted">Existing / Accessible (<?php echo $total_settings_files; ?> total)</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-cogs fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-success shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                        Pages Complete
                                    </div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800"><?php echo $completed_pages; ?> / <?php echo $total_pages; ?></div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-info shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                                        Completion Rate
                                    </div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800"><?php echo $total_pages > 0 ? round(($completed_pages / $total_pages) * 100) : 0; ?>%</div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-chart-pie fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-xl-3 col-md-6 mb-4">
                    <div class="card border-left-warning shadow h-100 py-2">
                        <div class="card-body">
                            <div class="row no-gutters align-items-center">
                                <div class="col mr-2">
                                    <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                        Action Items
                                    </div>
                                    <div class="h5 mb-0 font-weight-bold text-gray-800"><?php echo count($incomplete_settings) + count($incomplete_pages); ?></div>
                                </div>
                                <div class="col-auto">
                                    <i class="fas fa-exclamation-triangle fa-2x text-gray-300"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">
                        <i class="fas fa-bolt"></i>&nbsp;&nbsp;Quick Actions - Settings Management
                    </h6>
                </div>
                <div class="card-body">
                    <?php 
                    $categories = [];
                    foreach ($settings_files as $name => $info) {
                        $required_role = $info['role'] ?? 'Admin';
                        
                        // Check if user has access to this file based on role
                        if ($_SESSION['admin_role'] === 'Developer' || 
                            ($required_role === 'Admin' && in_array($_SESSION['admin_role'], ['Admin', 'Editor']))) {
                            $categories[$info['category']][] = [
                                'name' => $name, 
                                'file' => $info['file'],
                                'type' => $info['type'] ?? 'settings',
                                'exists' => file_exists($info['file'])
                            ];
                        }
                    }
                    ?>
                    
                    <?php foreach ($categories as $category => $files): ?>
                    <div class="mb-4">
                        <h6 class="text-muted mb-2">
                            <i class="fas fa-folder"></i>&nbsp;&nbsp;<?php echo $category; ?> Settings
                            <?php if ($category === 'System' && $_SESSION['admin_role'] === 'Developer'): ?>
                            <span class="badge badge-warning ml-2">Developer Only</span>
                            <?php endif; ?>
                        </h6>
                        <div class="row">
                            <?php foreach ($files as $file): ?>
                            <div class="col-md-4 col-lg-3 mb-3">
                                <?php if ($file['type'] === 'config'): ?>
                                    <!-- Special handling for database config -->
                                    <a href="dev_settings.php" class="btn btn-outline-danger btn-block">
                                        <i class="fas fa-database"></i>&nbsp;&nbsp;<?php echo $file['name']; ?>
                                        <?php if (!$file['exists']): ?>
                                        <br><small class="text-danger">Missing</small>
                                        <?php endif; ?>
                                    </a>
                                <?php elseif ($file['type'] === 'branding'): ?>
                                    <!-- Special handling for branding settings -->
                                    <a href="<?php echo $file['file']; ?>" class="btn btn-outline-success btn-block">
                                        <i class="fas fa-palette"></i>&nbsp;&nbsp;<?php echo $file['name']; ?>
                                        <?php if (!$file['exists']): ?>
                                        <br><small class="text-danger">Missing</small>
                                        <?php endif; ?>
                                    </a>
                                <?php else: ?>
                                    <a href="<?php echo $file['file']; ?>" class="btn btn-outline-primary btn-block">
                                        <i class="fas fa-edit"></i>&nbsp;&nbsp;<?php echo $file['name']; ?>
                                        <?php if (!$file['exists']): ?>
                                        <br><small class="text-danger">Missing</small>
                                        <?php endif; ?>
                                    </a>
                                <?php endif; ?>
                            </div>
                            <?php endforeach; ?>
                        </div>
                    </div>
                    <?php endforeach; ?>
                    
                    <div class="border-top pt-3">
                        <h6 class="text-muted mb-2">
                            <i class="fas fa-tools"></i>&nbsp;&nbsp;Analysis Tools
                        </h6>
                        <div class="row">
                            <div class="col-md-4 col-lg-3 mb-3">
                                <button onclick="scanAllPages()" class="btn btn-outline-info btn-block">
                                    <i class="fas fa-search"></i>&nbsp;&nbsp;Scan All Pages
                                </button>
                            </div>
                            <div class="col-md-4 col-lg-3 mb-3">
                                <button onclick="generateReport()" class="btn btn-outline-success btn-block">
                                    <i class="fas fa-file-alt"></i>&nbsp;&nbsp;Generate Report
                                </button>
                            </div>
                            <div class="col-md-4 col-lg-3 mb-3">
                                <button onclick="markAllComplete()" class="btn btn-outline-warning btn-block">
                                    <i class="fas fa-check-double"></i>&nbsp;&nbsp;Mark All Complete
                                </button>
                            </div>
                            <div class="col-md-4 col-lg-3 mb-3">
                                <?php 
                                // Check if development highlighting is currently enabled
                                $header_file = __DIR__ . '/../../assets/includes/header.php';
                                $header_content = file_get_contents($header_file);
                                $is_dev_mode = strpos($header_content, '// include_once __DIR__ . \'/content_highlighter.php\';') === false;
                                ?>
                                <button onclick="toggleDevMode()" class="btn btn-outline-<?php echo $is_dev_mode ? 'danger' : 'secondary'; ?> btn-block" id="devModeBtn">
                                    <i class="fas fa-<?php echo $is_dev_mode ? 'eye' : 'eye-slash'; ?>"></i>&nbsp;&nbsp;Dev Highlighting: <?php echo $is_dev_mode ? 'ON' : 'OFF'; ?>
                                </button>
                            </div>
                            <div class="col-md-4 col-lg-3 mb-3">
                                <button onclick="openAddPageModal()" class="btn btn-outline-primary btn-block">
                                    <i class="fas fa-plus"></i>&nbsp;&nbsp;Add New Page
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <!-- Action Items -->
                <div class="col-lg-6 mb-4">
                    <div class="card shadow">
                        <div class="card-header py-3">
                            <h6 class="m-0 font-weight-bold text-warning">
                                <i class="fas fa-exclamation-triangle"></i>&nbsp;&nbsp;Action Items
                            </h6>
                        </div>
                        <div class="card-body">
                            <?php if (count($incomplete_settings) > 0): ?>
                            <div class="mb-3">
                                <h6 class="text-danger">Missing Settings Files:</h6>
                                <ul class="list-unstyled">
                                    <?php foreach ($incomplete_settings as $setting): ?>
                                    <li><i class="fas fa-times text-danger"></i> <?php echo $setting; ?></li>
                                    <?php endforeach; ?>
                                </ul>
                            </div>
                            <?php endif; ?>
                            
                            <?php if (count($incomplete_pages) > 0): ?>
                            <div class="mb-3">
                                <h6 class="text-warning">Pages Needing Integration:</h6>
                                <ul class="list-unstyled" style="max-height: 200px; overflow-y: auto;">
                                    <?php foreach (array_slice($incomplete_pages, 0, 10) as $page): ?>
                                    <li><i class="fas fa-clock text-warning"></i> <?php echo $page; ?></li>
                                    <?php endforeach; ?>
                                    <?php if (count($incomplete_pages) > 10): ?>
                                    <li class="text-muted"><em>... and <?php echo count($incomplete_pages) - 10; ?> more</em></li>
                                    <?php endif; ?>
                                </ul>
                            </div>
                            <?php endif; ?>
                            
                            <?php if (count($incomplete_settings) == 0 && count($incomplete_pages) == 0): ?>
                            <div class="text-center py-3">
                                <i class="fas fa-check-circle fa-3x text-success mb-3"></i>
                                <h5 class="text-success">All Clear!</h5>
                                <p class="text-muted">No action items require attention.</p>
                            </div>
                            <?php endif; ?>
                        </div>
                    </div>
                </div>

                <!-- Recent Activity -->
                <div class="col-lg-6 mb-4">
                    <div class="card shadow">
                        <div class="card-header py-3">
                            <h6 class="m-0 font-weight-bold text-success">
                                <i class="fas fa-history"></i>&nbsp;&nbsp;Recent Activity
                            </h6>
                        </div>
                        <div class="card-body">
                            <?php if (count($recent_activity) > 0): ?>
                            <ul class="list-unstyled">
                                <?php foreach ($recent_activity as $activity): ?>
                                <li class="mb-2">
                                    <i class="fas fa-check text-success"></i> 
                                    <strong><?php echo htmlspecialchars($activity['page_name']); ?></strong>
                                    <br>
                                    <small class="text-muted">Updated <?php echo date('M j, Y g:i A', strtotime($activity['last_checked'])); ?></small>
                                </li>
                                <?php endforeach; ?>
                            </ul>
                            <?php else: ?>
                            <div class="text-center py-3">
                                <i class="fas fa-history fa-3x text-muted mb-3"></i>
                                <h6 class="text-muted">No Recent Activity</h6>
                                <p class="text-muted">Page completion updates will appear here.</p>
                            </div>
                            <?php endif; ?>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Page Integration Status -->
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-success">
                        <i class="fas fa-list-check"></i>&nbsp;&nbsp;Page Integration Status
                    </h6>
                    <div class="dropdown no-arrow">
                        <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                        </a>
                        <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in" aria-labelledby="dropdownMenuLink">
                            <div class="dropdown-header">Actions:</div>
                            <a class="dropdown-item" href="#" onclick="markAllComplete()">Mark All Complete</a>
                            <a class="dropdown-item" href="#" onclick="markAllIncomplete()">Mark All Incomplete</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item" href="#" onclick="exportStatus()">Export Status</a>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Missing Pages Alert -->
                    <?php 
                    $missing_pages = array_filter($detected_pages, function($page) { return !$page['exists']; });
                    $high_priority_missing = array_filter($missing_pages, function($page) { 
                        return ($page['config']['priority'] ?? 10) <= 3; 
                    });
                    ?>
                    
                    <?php if (!empty($high_priority_missing)): ?>
                    <div class="alert alert-info mb-4">
                        <h6><i class="fas fa-info-circle"></i> Recommended Pages Missing</h6>
                        <p class="mb-2">Consider adding these pages to enhance your website:</p>
                        <ul class="mb-0">
                            <?php foreach ($high_priority_missing as $path => $info): ?>
                            <li>
                                <strong><?php echo htmlspecialchars($info['config']['title']); ?></strong> 
                                (<?php echo $path; ?>)
                                <br><small class="text-muted"><?php echo htmlspecialchars($info['config']['description']); ?></small>
                            </li>
                            <?php endforeach; ?>
                        </ul>
                    </div>
                    <?php endif; ?>
                    
                    <div class="table-responsive">
                        <table class="table table-bordered" width="100%" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>Page</th>
                                    <th class="text-center">Status</th>
                                    <th class="text-center">Completion Toggle</th>
                                    <th class="text-center">Actions</th>
                                    <th>Last Updated</th>
                                </tr>
                            </thead>
                            <tbody>
                                <?php 
                                // Get existing page statuses and combine with detected pages
                                $stmt = $pdo->query('SELECT * FROM page_completion_status ORDER BY page_name');
                                $existing_statuses = $stmt->fetchAll(PDO::FETCH_ASSOC);
                                
                                // Create lookup for existing statuses
                                $status_lookup = [];
                                foreach ($existing_statuses as $status) {
                                    $status_lookup[$status['page_path']] = $status;
                                }
                                
                                // Show only pages that actually exist
                                foreach ($detected_pages as $page_path => $page_info): 
                                    if (!$page_info['exists']) continue;
                                    
                                    $status = $status_lookup[$page_path] ?? null;
                                    $page_name = $page_info['config']['title'] ?? basename($page_path, '.php');
                                    $is_complete = $status ? $status['is_complete'] : 0;
                                    $last_checked = $status ? $status['last_checked'] : null;
                                ?>
                                <tr>
                                    <td>
                                        <strong><?php echo htmlspecialchars($page_name); ?></strong>
                                        <br>
                                        <small class="text-muted"><?php echo htmlspecialchars($page_path); ?></small>
                                        <?php if (isset($page_info['config']['description'])): ?>
                                        <br>
                                        <small class="text-info"><?php echo htmlspecialchars($page_info['config']['description']); ?></small>
                                        <?php endif; ?>
                                    </td>
                                    <td class="text-center">
                                        <span class="badge badge-<?php echo $is_complete ? 'success' : 'warning'; ?>">
                                            <?php echo $is_complete ? 'Complete' : 'In Progress'; ?>
                                        </span>
                                    </td>
                                    <td class="text-center">
                                        <div class="form-check form-switch d-flex justify-content-center">
                                            <input type="checkbox" class="form-check-input page-toggle" 
                                                   data-page="<?php echo htmlspecialchars($page_path); ?>"
                                                   data-name="<?php echo htmlspecialchars($page_name); ?>"
                                                   <?php echo $is_complete ? 'checked' : ''; ?>>
                                        </div>
                                    </td>
                                    <td class="text-center">
                                        <div class="dropdown">
                                            <button class="btn btn-primary btn-sm dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="fas fa-cog"></i>&nbsp;&nbsp;Actions
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li>
                                                    <a class="dropdown-item" href="#" onclick="scanPage('<?php echo htmlspecialchars($page_path); ?>')">
                                                        <i class="fas fa-search"></i>&nbsp;&nbsp;Scan for Issues
                                                    </a>
                                                </li>
                                                <li>
                                                    <a class="dropdown-item" href="page_update.php?page=<?php echo urlencode($page_path); ?>&name=<?php echo urlencode($page_name); ?>">
                                                        <i class="fas fa-edit"></i>&nbsp;&nbsp;Update Settings
                                                    </a>
                                                </li>
                                                <li>
                                                    <a class="dropdown-item" href="../../<?php echo htmlspecialchars($page_path); ?>" target="_blank">
                                                        <i class="fas fa-external-link-alt"></i>&nbsp;&nbsp;View Page
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </td>
                                    <td>
                                        <?php echo $last_checked ? date('M j, Y g:i A', strtotime($last_checked)) : 'Never'; ?>
                                    </td>
                                </tr>
                                <?php endforeach; ?>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Instructions & Help Section -->
            <div class="card shadow mb-4">
                <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                    <h6 class="m-0 font-weight-bold text-info">
                        <i class="fas fa-question-circle"></i>&nbsp;&nbsp;How to Use This Dashboard - Searchable Instructions
                    </h6>
                    <button class="btn btn-info btn-sm" onclick="toggleInstructions()">
                        <i class="fas fa-eye" id="instructionsToggleIcon"></i>&nbsp;<span id="instructionsToggleText">Show Instructions</span>
                    </button>
                </div>
                <div class="card-body" id="instructionsSection" style="display: none;">
                    <!-- Search Box for Instructions -->
                    <div class="mb-3">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text"><i class="fas fa-search"></i></span>
                            </div>
                            <input type="text" class="form-control" id="instructionSearch" placeholder="Search instructions... (e.g., 'how to scan', 'toggle completion', 'quick actions')">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" onclick="clearSearch()">Clear</button>
                            </div>
                        </div>
                    </div>

                    <!-- Instructions Content -->
                    <div id="instructionsContent">
                        
                        <!-- Getting Started -->
                        <div class="instruction-section mb-4" data-keywords="getting started overview introduction begin setup">
                            <h5 class="text-primary"><i class="fas fa-play-circle"></i> Getting Started</h5>
                            <div class="card bg-light">
                                <div class="card-body">
                                    <p><strong>Welcome to your Settings Management Dashboard!</strong> This is your central command center for managing all website configuration.</p>
                                    <ul>
                                        <li><strong>Statistics Cards</strong> - Show your progress at a glance</li>
                                        <li><strong>Quick Actions</strong> - Direct access to all settings files</li>
                                        <li><strong>Action Items</strong> - Shows what needs attention</li>
                                        <li><strong>Page Tracker</strong> - Monitor which pages are fully integrated</li>
                                    </ul>
                                </div>
                            </div>
                        </div>

                        <!-- Understanding Statistics -->
                        <div class="instruction-section mb-4" data-keywords="statistics cards numbers progress metrics overview">
                            <h5 class="text-success"><i class="fas fa-chart-line"></i> Understanding the Statistics</h5>
                            <div class="card bg-light">
                                <div class="card-body">
                                    <ul>
                                        <li><strong>Settings Files</strong> - Shows existing files vs accessible files based on your role</li>
                                        <li><strong>Role-Based Access</strong> - Admins can access standard settings, Developers can access all files including database config</li>
                                        <li><strong>Pages Complete</strong> - Number of pages you've marked as fully integrated with settings</li>
                                        <li><strong>Completion Rate</strong> - Percentage of pages that are complete</li>
                                        <li><strong>Action Items</strong> - Count of things requiring your attention</li>
                                    </ul>
                                    <div class="alert alert-info mt-2">
                                        <strong>Tip:</strong> Aim for 100% completion rate! This means all your content is managed through settings instead of hardcoded.
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Using Quick Actions -->
                        <div class="instruction-section mb-4" data-keywords="quick actions settings files edit configure access">
                            <h5 class="text-warning"><i class="fas fa-bolt"></i> Using Quick Actions</h5>
                            <div class="card bg-light">
                                <div class="card-body">
                                    <p><strong>Quick Actions provide organized access to all settings files:</strong></p>
                                    <ul>
                                        <li><strong>General Settings</strong> - Site, Contact, Public, Account settings</li>
                                        <li><strong>Content Settings</strong> - Content variables, Blog settings</li>
                                        <li><strong>Marketing Settings</strong> - SEO, Meta tags</li>
                                        <li><strong>E-commerce Settings</strong> - Shop configuration</li>
                                        <li><strong>Design Settings</strong> - Templates, Images</li>
                                        <li><strong>System Settings</strong> - Technical configuration</li>
                                    </ul>
                                    <div class="alert alert-success mt-2">
                                        <strong>How to use:</strong> Click any button to go directly to that settings file. Make your changes and save.
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Page Completion Tracking -->
                        <div class="instruction-section mb-4" data-keywords="page completion toggle tracking integration status complete incomplete">
                            <h5 class="text-info"><i class="fas fa-toggle-on"></i> Page Completion Tracking</h5>
                            <div class="card bg-light">
                                <div class="card-body">
                                    <p><strong>The Page Integration Status table helps you track which pages are fully integrated:</strong></p>
                                    <ul>
                                        <li><strong>Status Badge</strong> - Shows Complete (green) or In Progress (yellow)</li>
                                        <li><strong>Completion Toggle</strong> - Click the switch to mark a page as complete</li>
                                        <li><strong>Scan Button</strong> - Analyzes the page for hardcoded content</li>
                                        <li><strong>View Button</strong> - Opens the page in a new tab</li>
                                    </ul>
                                    <div class="alert alert-warning mt-2">
                                        <strong>When to mark complete:</strong> Only toggle to "Complete" when ALL content on that page is managed through settings (no hardcoded text, images, etc.).
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Content Scanning -->
                        <div class="instruction-section mb-4" data-keywords="scan scanning content analysis hardcoded text issues problems">
                            <h5 class="text-danger"><i class="fas fa-search"></i> Content Scanning & Analysis</h5>
                            <div class="card bg-light">
                                <div class="card-body">
                                    <p><strong>Use scanning tools to find content that should be moved to settings:</strong></p>
                                    <ul>
                                        <li><strong>Individual Page Scan</strong> - Click the <i class="fas fa-search"></i> button next to any page</li>
                                        <li><strong>Scan All Pages</strong> - Use the "Scan All Pages" button in Quick Actions</li>
                                        <li><strong>What it finds:</strong> Hardcoded text, TODO comments, content that should be in settings</li>
                                    </ul>
                                    <div class="alert alert-info mt-2">
                                        <strong>Pro Tip:</strong> Scan pages regularly as you work. The scanner helps identify text that should be moved from hardcoded to settings variables.
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Action Items -->
                        <div class="instruction-section mb-4" data-keywords="action items attention missing incomplete tasks todo">
                            <h5 class="text-warning"><i class="fas fa-exclamation-triangle"></i> Understanding Action Items</h5>
                            <div class="card bg-light">
                                <div class="card-body">
                                    <p><strong>Action Items show what needs your attention:</strong></p>
                                    <ul>
                                        <li><strong>Missing Settings Files</strong> - Settings files that don't exist yet</li>
                                        <li><strong>Pages Needing Integration</strong> - Pages marked as incomplete</li>
                                        <li><strong>Configuration Issues</strong> - Settings that need values</li>
                                    </ul>
                                    <div class="alert alert-success mt-2">
                                        <strong>Goal:</strong> Work to get your Action Items count to zero! This means everything is properly configured.
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Workflow Recommendations -->
                        <div class="instruction-section mb-4" data-keywords="workflow process steps best practice recommended approach">
                            <h5 class="text-success"><i class="fas fa-tasks"></i> Recommended Workflow</h5>
                            <div class="card bg-light">
                                <div class="card-body">
                                    <p><strong>Follow this process for best results:</strong></p>
                                    <ol>
                                        <li><strong>Check Action Items</strong> - See what needs immediate attention</li>
                                        <li><strong>Configure Settings</strong> - Use Quick Actions to edit settings files</li>
                                        <li><strong>Scan Pages</strong> - Find hardcoded content that should be in settings</li>
                                        <li><strong>Move Content to Settings</strong> - Replace hardcoded text with settings variables</li>
                                        <li><strong>Mark Pages Complete</strong> - Toggle completion when page is fully integrated</li>
                                        <li><strong>Monitor Progress</strong> - Watch your completion rate increase</li>
                                    </ol>
                                    <div class="alert alert-info mt-2">
                                        <strong>Remember:</strong> The goal is to have ALL content managed through settings so you can easily customize your site for any client.
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Role-Based Access Section -->
                        <div class="instruction-section mb-4" data-keywords="role access permissions developer admin database config security">
                            <div class="instruction-header">
                                <h5 class="mb-3 text-primary">
                                    <i class="fas fa-user-shield"></i> Role-Based Access Control
                                </h5>
                            </div>
                            <div class="instruction-content">
                                <div class="row">
                                    <div class="col-md-6">
                                        <h6 class="text-success">Admin & Editor Access:</h6>
                                        <ul class="list-unstyled">
                                            <li><i class="fas fa-check text-success"></i> Shop Settings</li>
                                            <li><i class="fas fa-check text-success"></i> Blog Settings</li>
                                            <li><i class="fas fa-check text-success"></i> Contact Settings</li>
                                            <li><i class="fas fa-check text-success"></i> All standard configuration files</li>
                                        </ul>
                                    </div>
                                    <div class="col-md-6">
                                        <h6 class="text-warning">Developer Only Access:</h6>
                                        <ul class="list-unstyled">
                                            <li><i class="fas fa-check text-warning"></i> Database Configuration</li>
                                            <li><i class="fas fa-check text-warning"></i> System-level settings</li>
                                            <li><i class="fas fa-check text-warning"></i> All files (full access)</li>
                                        </ul>
                                        <div class="alert alert-warning mt-2">
                                            <small><i class="fas fa-exclamation-triangle"></i> Database config access requires Developer role for security</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Bulk Operations -->
                        <div class="instruction-section mb-4" data-keywords="bulk operations mark all complete incomplete mass actions">
                            <h5 class="text-primary"><i class="fas fa-layer-group"></i> Bulk Operations</h5>
                            <div class="card bg-light">
                                <div class="card-body">
                                    <p><strong>Save time with bulk operations:</strong></p>
                                    <ul>
                                        <li><strong>Mark All Complete</strong> - Sets all pages to complete status</li>
                                        <li><strong>Mark All Incomplete</strong> - Resets all pages to incomplete</li>
                                        <li><strong>Scan All Pages</strong> - Analyzes all pages for issues</li>
                                        <li><strong>Generate Report</strong> - Creates comprehensive status report</li>
                                        <li><strong>Export Status</strong> - Downloads current completion data</li>
                                    </ul>
                                    <div class="alert alert-warning mt-2">
                                        <strong>Use carefully:</strong> Bulk operations affect many pages at once. Use "Mark All Complete" only when you're sure all pages are actually complete.
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Troubleshooting -->
                        <div class="instruction-section mb-4" data-keywords="troubleshooting problems issues errors help fix">
                            <h5 class="text-danger"><i class="fas fa-wrench"></i> Troubleshooting</h5>
                            <div class="card bg-light">
                                <div class="card-body">
                                    <p><strong>Common issues and solutions:</strong></p>
                                    <ul>
                                        <li><strong>Toggle not working?</strong> - Refresh the page and try again</li>
                                        <li><strong>Scan shows no results?</strong> - Page might already be clean or have permission issues</li>
                                        <li><strong>Settings file won't load?</strong> - Check file permissions and paths</li>
                                        <li><strong>Statistics not updating?</strong> - Use the Refresh button in the header</li>
                                    </ul>
                                    <div class="alert alert-info mt-2">
                                        <strong>Need help?</strong> Check the browser console (F12) for error messages, or refresh the dashboard.
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Tips & Best Practices -->
                        <div class="instruction-section mb-4" data-keywords="tips best practices optimization efficiency advice">
                            <h5 class="text-success"><i class="fas fa-lightbulb"></i> Tips & Best Practices</h5>
                            <div class="card bg-light">
                                <div class="card-body">
                                    <p><strong>Pro tips for maximum efficiency:</strong></p>
                                    <ul>
                                        <li><strong>Work systematically</strong> - Complete one section at a time (e.g., all General settings first)</li>
                                        <li><strong>Use descriptive names</strong> - When creating setting variables, use clear, descriptive names</li>
                                        <li><strong>Test as you go</strong> - View pages after making settings changes to ensure they work</li>
                                        <li><strong>Keep notes</strong> - Use the completion notes field for complex integrations</li>
                                        <li><strong>Regular scanning</strong> - Scan pages weekly to catch new hardcoded content</li>
                                        <li><strong>Backup first</strong> - Always backup before major settings changes</li>
                                    </ul>
                                    <div class="alert alert-success mt-2">
                                        <strong>Success goal:</strong> When you reach 100% completion, you'll have a fully configurable website that can be customized for any client in minutes!
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

<!-- Scan Results Modal -->
<div class="modal fade" id="scanModal" tabindex="-1" role="dialog" aria-labelledby="scanModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="scanModalLabel">Page Scan Results</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="scanResults">
                <div class="text-center">
                    <i class="fas fa-spinner fa-spin fa-2x text-primary"></i>
                    <p>Scanning page...</p>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Add New Page Modal -->
<div class="modal fade" id="addPageModal" tabindex="-1" role="dialog" aria-labelledby="addPageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addPageModalLabel">Add New Page Mapping</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addPageForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label for="pagePath" class="form-label">Page Path <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="pagePath" name="page_path" placeholder="e.g., services.php" required>
                                <small class="form-text text-muted">The filename of the page (include .php)</small>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group mb-3">
                                <label for="displayName" class="form-label">Display Name <span class="text-danger">*</span></label>
                                <input type="text" class="form-control" id="displayName" name="display_name" placeholder="e.g., Services Page" required>
                                <small class="form-text text-muted">Human-readable name for the page</small>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label for="settingsFile" class="form-label">Settings File <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="settingsFile" name="settings_file" placeholder="e.g., services_settings.php" required>
                        <small class="form-text text-muted">The PHP file that will store the settings (will be created in assets/includes/settings/)</small>
                    </div>
                    
                    <div class="form-group mb-3">
                        <label class="form-label">Page Fields</label>
                        <div id="pageFields">
                            <div class="field-row border rounded p-3 mb-2">
                                <div class="row">
                                    <div class="col-md-4">
                                        <input type="text" class="form-control field-name" placeholder="Field name (e.g., title)" required>
                                    </div>
                                    <div class="col-md-3">
                                        <select class="form-control field-type">
                                            <option value="text">Text Input</option>
                                            <option value="textarea">Textarea</option>
                                            <option value="summernote">Rich Text (Summernote)</option>
                                            <option value="email">Email</option>
                                            <option value="number">Number</option>
                                        </select>
                                    </div>
                                    <div class="col-md-4">
                                        <input type="text" class="form-control field-label" placeholder="Display label (e.g., Page Title)" required>
                                    </div>
                                    <div class="col-md-1">
                                        <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeField(this)" disabled>
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-outline-primary btn-sm" onclick="addField()">
                            <i class="fas fa-plus"></i> Add Field
                        </button>
                    </div>
                    
                    <div class="alert alert-info">
                        <h6><i class="fas fa-info-circle"></i> What happens when you add this page:</h6>
                        <ul class="mb-0">
                            <li>Creates a mapping in the page settings configuration</li>
                            <li>The settings file will be created automatically when first saved</li>
                            <li>The page will appear in the settings dashboard with edit options</li>
                            <li>You can immediately start editing content for this page</li>
                        </ul>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addPageMapping()">
                    <i class="fas fa-plus"></i> Add Page Mapping
                </button>
            </div>
        </div>
    </div>
</div>

<script>
// Instructions toggle functionality
function toggleInstructions() {
    const section = document.getElementById('instructionsSection');
    const icon = document.getElementById('instructionsToggleIcon');
    const text = document.getElementById('instructionsToggleText');
    
    if (section.style.display === 'none') {
        section.style.display = 'block';
        icon.className = 'fas fa-eye-slash';
        text.textContent = 'Hide Instructions';
    } else {
        section.style.display = 'none';
        icon.className = 'fas fa-eye';
        text.textContent = 'Show Instructions';
    }
}

// Searchable instructions functionality
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('instructionSearch');
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const sections = document.querySelectorAll('.instruction-section');
            
            sections.forEach(function(section) {
                const keywords = section.getAttribute('data-keywords').toLowerCase();
                const content = section.textContent.toLowerCase();
                
                if (searchTerm === '' || keywords.includes(searchTerm) || content.includes(searchTerm)) {
                    section.style.display = 'block';
                    // Highlight matching text
                    if (searchTerm !== '') {
                        highlightText(section, searchTerm);
                    } else {
                        removeHighlights(section);
                    }
                } else {
                    section.style.display = 'none';
                }
            });
            
            // Show "no results" message if no sections are visible
            const visibleSections = document.querySelectorAll('.instruction-section[style*="block"]');
            let noResultsMsg = document.getElementById('noResultsMessage');
            
            if (searchTerm !== '' && visibleSections.length === 0) {
                if (!noResultsMsg) {
                    noResultsMsg = document.createElement('div');
                    noResultsMsg.id = 'noResultsMessage';
                    noResultsMsg.className = 'alert alert-info text-center';
                    noResultsMsg.innerHTML = '<i class="fas fa-search"></i> No instructions found matching your search. Try different keywords like "scan", "toggle", "quick actions", etc.';
                    document.getElementById('instructionsContent').appendChild(noResultsMsg);
                }
                noResultsMsg.style.display = 'block';
            } else if (noResultsMsg) {
                noResultsMsg.style.display = 'none';
            }
        });
    }
});

function clearSearch() {
    const searchInput = document.getElementById('instructionSearch');
    searchInput.value = '';
    searchInput.dispatchEvent(new Event('input'));
}

function highlightText(element, searchTerm) {
    // Remove existing highlights first
    removeHighlights(element);
    
    // Get all text nodes
    const walker = document.createTreeWalker(
        element,
        NodeFilter.SHOW_TEXT,
        null,
        false
    );
    
    const textNodes = [];
    let node;
    while (node = walker.nextNode()) {
        textNodes.push(node);
    }
    
    // Highlight matching text
    textNodes.forEach(function(textNode) {
        const text = textNode.textContent.toLowerCase();
        const index = text.indexOf(searchTerm);
        
        if (index !== -1) {
            const parent = textNode.parentNode;
            const beforeText = textNode.textContent.substring(0, index);
            const matchText = textNode.textContent.substring(index, index + searchTerm.length);
            const afterText = textNode.textContent.substring(index + searchTerm.length);
            
            const span = document.createElement('span');
            span.className = 'bg-warning text-dark font-weight-bold search-highlight';
            span.textContent = matchText;
            
            parent.insertBefore(document.createTextNode(beforeText), textNode);
            parent.insertBefore(span, textNode);
            parent.insertBefore(document.createTextNode(afterText), textNode);
            parent.removeChild(textNode);
        }
    });
}

function removeHighlights(element) {
    const highlights = element.querySelectorAll('.search-highlight');
    highlights.forEach(function(highlight) {
        const parent = highlight.parentNode;
        parent.insertBefore(document.createTextNode(highlight.textContent), highlight);
        parent.removeChild(highlight);
        parent.normalize();
    });
}

// Page completion toggle handler
$(document).on('change', '.page-toggle', function() {
    const checkbox = $(this);
    const pagePath = checkbox.data('page');
    const pageName = checkbox.data('name');
    const isComplete = checkbox.is(':checked');
    
    $.ajax({
        url: '',
        method: 'POST',
        data: {
            action: 'toggle_page_completion',
            page_path: pagePath,
            page_name: pageName,
            is_complete: isComplete
        },
        success: function(response) {
            const result = JSON.parse(response);
            if (result.success) {
                // Update status badge
                const row = checkbox.closest('tr');
                const statusBadge = row.find('.badge');
                if (isComplete) {
                    statusBadge.removeClass('badge-warning').addClass('badge-success').text('Complete');
                } else {
                    statusBadge.removeClass('badge-success').addClass('badge-warning').text('In Progress');
                }
                
                // Show success message
                showAlert('Page status updated successfully!', 'success');
                
                // Refresh statistics after a delay
                setTimeout(refreshDashboard, 1000);
            }
        },
        error: function() {
            // Revert checkbox state
            checkbox.prop('checked', !isComplete);
            showAlert('Error updating page status', 'danger');
        }
    });
});

// Scan individual page
function scanPage(pagePath) {
    var scanModal = new bootstrap.Modal(document.getElementById('scanModal'));
    scanModal.show();
    $('#scanResults').html('<div class="text-center"><i class="fas fa-spinner fa-spin fa-2x text-primary"></i><p>Scanning page...</p></div>');
    
    $.ajax({
        url: '',
        method: 'POST',
        data: {
            action: 'scan_content',
            page_path: pagePath
        },
        success: function(response) {
            const result = JSON.parse(response);
            let html = '<h6>Scan Results for: ' + pagePath + '</h6>';
            
            if (result.error) {
                html += '<div class="alert alert-danger">' + result.error + '</div>';
            } else if (result.issues && result.issues.length > 0) {
                html += '<div class="alert alert-warning">Found ' + result.total_issues + ' potential issues:</div>';
                html += '<ul class="list-group">';
                result.issues.forEach(function(issue) {
                    html += '<li class="list-group-item">' + issue + '</li>';
                });
                html += '</ul>';
            } else {
                html += '<div class="alert alert-success">No issues found!</div>';
            }
            
            $('#scanResults').html(html);
        },
        error: function() {
            $('#scanResults').html('<div class="alert alert-danger">Error scanning page</div>');
        }
    });
}

// Scan all pages
function scanAllPages() {
    showAlert('Scanning all pages... This may take a moment.', 'info');
    // Implementation would scan all pages
    setTimeout(function() {
        showAlert('Page scan completed! Check individual pages for results.', 'success');
    }, 3000);
}

// Refresh dashboard
function refreshDashboard() {
    location.reload();
}

// Mark all complete
function markAllComplete() {
    if (confirm('Mark all pages as complete? This action cannot be undone.')) {
        $('.page-toggle:not(:checked)').each(function() {
            $(this).trigger('click');
        });
    }
}

// Mark all incomplete  
function markAllIncomplete() {
    if (confirm('Mark all pages as incomplete?')) {
        $('.page-toggle:checked').each(function() {
            $(this).trigger('click');
        });
    }
}

// Generate report
function generateReport() {
    showAlert('Generating comprehensive settings report...', 'info');
    // Implementation would generate a detailed report
}

// Export status
function exportStatus() {
    showAlert('Exporting status data...', 'info');
    // Implementation would export status to CSV/JSON
}

// Toggle development mode highlighting
function toggleDevMode() {
    const btn = document.getElementById('devModeBtn');
    btn.disabled = true;
    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>&nbsp;&nbsp;Toggling...';
    
    $.ajax({
        url: '',
        method: 'POST',
        data: {
            action: 'toggle_dev_mode'
        },
        dataType: 'json',
        success: function(response) {
            if (response.success) {
                if (response.state === 'enabled') {
                    btn.className = 'btn btn-outline-danger btn-block';
                    btn.innerHTML = '<i class="fas fa-eye"></i>&nbsp;&nbsp;Dev Highlighting: ON';
                    showAlert('Development highlighting enabled. Refresh pages to see highlighting.', 'success');
                } else {
                    btn.className = 'btn btn-outline-secondary btn-block';
                    btn.innerHTML = '<i class="fas fa-eye-slash"></i>&nbsp;&nbsp;Dev Highlighting: OFF';
                    showAlert('Development highlighting disabled. Refresh pages to see changes.', 'success');
                }
            } else {
                showAlert('Failed to toggle development mode.', 'danger');
            }
            btn.disabled = false;
        },
        error: function() {
            showAlert('Error toggling development mode.', 'danger');
            btn.disabled = false;
            btn.innerHTML = '<i class="fas fa-eye-slash"></i>&nbsp;&nbsp;Dev Highlighting';
        }
    });
}

// Open add page modal
function openAddPageModal() {
    $('#addPageModal').modal('show');
}

// Add a new field to the page configuration
function addField() {
    const fieldsContainer = document.getElementById('pageFields');
    const fieldCount = fieldsContainer.children.length;
    
    const fieldRow = document.createElement('div');
    fieldRow.className = 'field-row border rounded p-3 mb-2';
    fieldRow.innerHTML = `
        <div class="row">
            <div class="col-md-4">
                <input type="text" class="form-control field-name" placeholder="Field name (e.g., description)" required>
            </div>
            <div class="col-md-3">
                <select class="form-control field-type">
                    <option value="text">Text Input</option>
                    <option value="textarea">Textarea</option>
                    <option value="summernote">Rich Text (Summernote)</option>
                    <option value="email">Email</option>
                    <option value="number">Number</option>
                </select>
            </div>
            <div class="col-md-4">
                <input type="text" class="form-control field-label" placeholder="Display label (e.g., Description)" required>
            </div>
            <div class="col-md-1">
                <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeField(this)">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
    `;
    
    fieldsContainer.appendChild(fieldRow);
    updateRemoveButtons();
}

// Remove a field from the page configuration
function removeField(button) {
    button.closest('.field-row').remove();
    updateRemoveButtons();
}

// Update remove button states (disable if only one field)
function updateRemoveButtons() {
    const fieldRows = document.querySelectorAll('.field-row');
    fieldRows.forEach((row, index) => {
        const removeBtn = row.querySelector('.btn-outline-danger');
        if (removeBtn) {
            removeBtn.disabled = fieldRows.length <= 1;
        }
    });
}

// Add page mapping
function addPageMapping() {
    const form = document.getElementById('addPageForm');
    const formData = new FormData(form);
    
    // Collect field configurations
    const fieldConfigs = {};
    const fieldRows = document.querySelectorAll('.field-row');
    
    let isValid = true;
    fieldRows.forEach(row => {
        const nameInput = row.querySelector('.field-name');
        const typeSelect = row.querySelector('.field-type');
        const labelInput = row.querySelector('.field-label');
        
        if (!nameInput.value.trim() || !labelInput.value.trim()) {
            isValid = false;
            return;
        }
        
        fieldConfigs[nameInput.value.trim()] = {
            type: typeSelect.value,
            label: labelInput.value.trim()
        };
    });
    
    if (!isValid) {
        showAlert('Please fill in all field names and labels.', 'danger');
        return;
    }
    
    if (Object.keys(fieldConfigs).length === 0) {
        showAlert('Please add at least one field.', 'danger');
        return;
    }
    
    // Show loading state
    const submitBtn = document.querySelector('#addPageModal .btn-primary');
    const originalText = submitBtn.innerHTML;
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...';
    
    $.ajax({
        url: '',
        method: 'POST',
        data: {
            action: 'add_page_mapping',
            page_path: formData.get('page_path'),
            display_name: formData.get('display_name'),
            settings_file: formData.get('settings_file'),
            field_configs: JSON.stringify(fieldConfigs)
        },
        dataType: 'json',
        success: function(response) {
            if (response.success) {
                showAlert('Page mapping added successfully! Refreshing page...', 'success');
                setTimeout(() => {
                    location.reload();
                }, 1500);
            } else {
                showAlert('Error: ' + (response.error || 'Unknown error occurred'), 'danger');
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            }
        },
        error: function() {
            showAlert('Network error occurred while adding page mapping.', 'danger');
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalText;
        }
    });
}

// Show alert helper
function showAlert(message, type) {
    const alertHtml = `
        <div class="alert alert-${type} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    `;
    
    // Remove existing alerts and add new one
    $('.container-fluid .alert-dismissible').remove();
    $('.container-fluid > .row > .col-12').first().prepend(alertHtml);
}
</script>

<?php echo template_admin_footer(); ?>