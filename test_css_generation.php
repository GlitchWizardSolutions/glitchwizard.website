<?php
require_once '../private/gws-universal-config.php';

echo "<h2>CSS Generation Test</h2>";

// Define the function locally for testing
function generateCustomFontsCSS() {
    global $pdo;
    
    try {
        // Get custom font uploads
        $stmt = $pdo->query("SELECT font_upload_1, font_upload_2, font_upload_3, font_upload_4, font_upload_5 FROM setting_business_identity WHERE id = 1");
        $custom_fonts = $stmt->fetch(PDO::FETCH_ASSOC);
        
        if (!$custom_fonts) {
            echo "<p>No custom fonts data found</p>";
            return false;
        }
        
        $font_purposes = [
            'font_upload_1' => 'Regular Body Text Custom',
            'font_upload_2' => 'Headings Titles Custom', 
            'font_upload_3' => 'Formal Professional Custom',
            'font_upload_4' => 'Decorative Fancy Custom',
            'font_upload_5' => 'Italic Emphasis Custom'
        ];
        
        $css_content = "/* Custom Fonts CSS - Auto-generated by Branding System */\n";
        $css_content .= "/* This file is automatically updated when custom fonts are uploaded */\n\n";
        
        $fonts_added = 0;
        foreach ($custom_fonts as $slot => $font_path) {
            echo "<p>Processing $slot: '$font_path'</p>";
            
            if (!empty($font_path)) {
                if (file_exists($font_path)) {
                    echo "<p>✓ File exists at: $font_path</p>";
                    
                    $filename = basename($font_path);
                    $file_ext = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
                    $font_name = $font_purposes[$slot];
                    
                    // Create relative path from CSS file location to the font file
                    $relative_path = '../fonts/custom/' . $filename;
                    
                    $css_content .= "/* {$font_purposes[$slot]} */\n";
                    $css_content .= "@font-face {\n";
                    $css_content .= "    font-family: '{$font_name}';\n";
                    $css_content .= "    src: url('{$relative_path}')";
                    
                    // Add format based on file extension
                    switch ($file_ext) {
                        case 'woff2':
                            $css_content .= " format('woff2')";
                            break;
                        case 'woff':
                            $css_content .= " format('woff')";
                            break;
                        case 'ttf':
                            $css_content .= " format('truetype')";
                            break;
                        case 'otf':
                            $css_content .= " format('opentype')";
                            break;
                    }
                    
                    $css_content .= ";\n";
                    $css_content .= "    font-weight: 400;\n";
                    $css_content .= "    font-style: normal;\n";
                    $css_content .= "    font-display: swap;\n";
                    $css_content .= "}\n\n";
                    
                    $fonts_added++;
                } else {
                    echo "<p>✗ File not found at: $font_path</p>";
                }
            } else {
                echo "<p>- Path is empty</p>";
            }
        }
        
        $css_content .= "/* End of auto-generated custom fonts */\n";
        
        echo "<p><strong>Fonts processed: $fonts_added</strong></p>";
        
        // Write to CSS file
        $css_file_path = 'assets/css/custom-fonts.css';
        $css_dir = dirname($css_file_path);
        
        echo "<p>CSS file path: $css_file_path</p>";
        echo "<p>CSS directory: $css_dir</p>";
        
        // Create directory if it doesn't exist
        if (!is_dir($css_dir)) {
            echo "<p>Creating CSS directory...</p>";
            mkdir($css_dir, 0755, true);
        }
        
        $result = file_put_contents($css_file_path, $css_content);
        
        if ($result !== false) {
            echo "<p class='success'>✓ CSS file written successfully ($result bytes)</p>";
            echo "<h3>CSS Content:</h3>";
            echo "<pre>" . htmlspecialchars($css_content) . "</pre>";
            return true;
        } else {
            echo "<p class='error'>✗ Failed to write CSS file</p>";
            return false;
        }
        
    } catch (Exception $e) {
        echo "<p class='error'>Error generating custom fonts CSS: " . $e->getMessage() . "</p>";
        return false;
    }
}

// Test the function
generateCustomFontsCSS();

echo "<style>
.success { color: green; }
.error { color: red; }
pre { background: #f5f5f5; padding: 10px; border-radius: 4px; overflow-x: auto; max-height: 300px; }
</style>";
?>
