<?php
/**
 * CONFIG GENERATOR SCRIPT
 * Generates configuration files from templates
 * 
 * Usage: php generate-config.php [app_name]
 * Example: php generate-config.php blog
 */

// Prevent direct web access
if (php_sapi_name() !== 'cli') {
    die('This script can only be run from the command line');
}

// Define constants
define('PROJECT_ROOT', dirname(dirname(dirname(__DIR__))));

class ConfigGenerator {
    private $templateDir;
    private $configDir;
    private $appName;
    
    /**
     * Constructor
     * @param string $appName Name of the application (blog, accounts, etc.)
     */
    public function __construct($appName) {
        $this->appName = $appName;
        $this->templateDir = PROJECT_ROOT . "/public_html/{$appName}/settings";
        $this->configDir = $this->templateDir;
    }
    
    /**
     * Generate configuration file from template
     * @return bool True if successful
     */
    public function generate() {
        $templateFile = "{$this->templateDir}/{$this->appName}-config.template.php";
        $configFile = "{$this->configDir}/{$this->appName}-config.php";
        
        // Check if template exists
        if (!file_exists($templateFile)) {
            echo "Error: Template file not found: {$templateFile}\n";
            return false;
        }
        
        // Check if config already exists
        if (file_exists($configFile)) {
            echo "Warning: Config file already exists. Do you want to overwrite it? (y/n): ";
            $answer = trim(fgets(STDIN));
            if (strtolower($answer) !== 'y') {
                echo "Operation cancelled.\n";
                return false;
            }
        }
        
        // Load template
        $template = include($templateFile);
        
        // Get values for settings
        $config = $this->promptForSettings($template);
        
        // Generate the config file
        if (!$this->writeConfigFile($configFile, $config)) {
            echo "Error: Failed to write config file\n";
            return false;
        }
        
        echo "Configuration file generated successfully: {$configFile}\n";
        return true;
    }
    
    /**
     * Prompt for setting values
     * @param array $template Template configuration
     * @return array Completed configuration
     */
    private function promptForSettings($template) {
        $config = [];
        
        foreach ($template as $section => $settings) {
            echo "\nConfiguring {$section}:\n";
            $config[$section] = $this->promptForSection($settings);
        }
        
        return $config;
    }
    
    /**
     * Prompt for section values
     * @param array $settings Section settings
     * @return array Completed section
     */
    private function promptForSection($settings) {
        $section = [];
        
        foreach ($settings as $key => $default) {
            $type = gettype($default);
            
            echo "{$key} ({$type}";
            if ($type === 'array') {
                echo " - comma-separated values";
            }
            echo ")\n";
            echo "Default: " . $this->formatDefault($default) . "\n";
            echo "New value (press Enter for default): ";
            
            $input = trim(fgets(STDIN));
            
            if ($input === '') {
                $section[$key] = $default;
            } else {
                $section[$key] = $this->parseInput($input, $type);
            }
        }
        
        return $section;
    }
    
    /**
     * Format default value for display
     * @param mixed $value Value to format
     * @return string Formatted value
     */
    private function formatDefault($value) {
        if (is_array($value)) {
            return implode(', ', $value);
        } elseif (is_bool($value)) {
            return $value ? 'true' : 'false';
        }
        return (string)$value;
    }
    
    /**
     * Parse user input into correct type
     * @param string $input User input
     * @param string $type Expected type
     * @return mixed Parsed value
     */
    private function parseInput($input, $type) {
        switch ($type) {
            case 'boolean':
                return filter_var($input, FILTER_VALIDATE_BOOLEAN);
            case 'integer':
                return (int)$input;
            case 'array':
                return array_map('trim', explode(',', $input));
            default:
                return $input;
        }
    }
    
    /**
     * Write configuration to file
     * @param string $file Filename
     * @param array $config Configuration array
     * @return bool True if successful
     */
    private function writeConfigFile($file, $config) {
        $content = "<?php\n\n";
        $content .= "// Generated by config-generator.php on " . date('Y-m-d H:i:s') . "\n\n";
        $content .= "// Prevent direct access\n";
        $content .= "if (!defined('PROJECT_ROOT')) { die('Direct access not allowed'); }\n\n";
        
        foreach ($config as $section => $settings) {
            $content .= "\${$section} = " . var_export($settings, true) . ";\n\n";
        }
        
        $content .= "return [\n";
        foreach ($config as $section => $settings) {
            $content .= "    '{$section}' => \${$section},\n";
        }
        $content .= "];\n";
        
        return file_put_contents($file, $content) !== false;
    }
}

// Run the generator if script is called directly
if (isset($argv[1])) {
    $generator = new ConfigGenerator($argv[1]);
    $generator->generate();
} else {
    echo "Usage: php generate-config.php [app_name]\n";
    echo "Available apps: blog, accounts, client, documents\n";
}
