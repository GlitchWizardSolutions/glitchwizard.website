<?php
require_once '../private/gws-universal-config.php';

echo "<h2>Font Path Migration to Public HTML</h2>";

// Check new font directory
$new_upload_dir = 'assets/fonts/custom/';
$full_new_path = __DIR__ . '/' . $new_upload_dir;

echo "<p><strong>New font directory:</strong> $new_upload_dir</p>";
echo "<p><strong>Full path:</strong> $full_new_path</p>";

if (is_dir($full_new_path)) {
    echo "<p class='success'>✓ New font directory exists</p>";
    
    // List files in new location
    $files = scandir($full_new_path);
    $font_files = array_filter($files, function($file) {
        return !in_array($file, ['.', '..']) && preg_match('/\.(woff2|woff|ttf|otf)$/i', $file);
    });
    
    echo "<p><strong>Font files in new location:</strong> " . count($font_files) . "</p>";
    if (!empty($font_files)) {
        echo "<ul>";
        foreach ($font_files as $file) {
            echo "<li>$file</li>";
        }
        echo "</ul>";
        
        // Update database with new paths
        echo "<h3>Updating Database Paths</h3>";
        
        foreach ($font_files as $file) {
            // Extract slot number from filename
            if (preg_match('/custom_font_(\d+)_/', $file, $matches)) {
                $slot = $matches[1];
                $column = "font_upload_$slot";
                $new_db_path = $new_upload_dir . $file;  // Store relative path from public_html
                
                try {
                    $stmt = $pdo->prepare("UPDATE setting_business_identity SET $column = ? WHERE id = 1");
                    $stmt->execute([$new_db_path]);
                    echo "<p class='success'>✓ Updated $column: $new_db_path</p>";
                } catch (Exception $e) {
                    echo "<p class='error'>✗ Error updating $column: " . $e->getMessage() . "</p>";
                }
            }
        }
        
        // Verify the updates
        echo "<h3>Verification</h3>";
        $verify_stmt = $pdo->query("SELECT font_upload_1, font_upload_2, font_upload_3, font_upload_4, font_upload_5 FROM setting_business_identity WHERE id = 1");
        $result = $verify_stmt->fetch(PDO::FETCH_ASSOC);
        
        if ($result) {
            echo "<p><strong>Updated database paths:</strong></p><ul>";
            foreach ($result as $column => $path) {
                $file_exists = !empty($path) && file_exists($path) ? "✓ EXISTS" : (!empty($path) ? "✗ NOT FOUND" : "EMPTY");
                echo "<li><strong>$column:</strong> " . ($path ?: "EMPTY") . " $file_exists</li>";
            }
            echo "</ul>";
        }
        
        // Also regenerate the CSS file
        echo "<h3>Regenerating CSS File</h3>";
        
        // Include the function from branding settings
        if (!function_exists('generateCustomFontsCSS')) {
            function generateCustomFontsCSS() {
                global $pdo;
                
                try {
                    // Get custom font uploads
                    $stmt = $pdo->query("SELECT font_upload_1, font_upload_2, font_upload_3, font_upload_4, font_upload_5 FROM setting_business_identity WHERE id = 1");
                    $custom_fonts = $stmt->fetch(PDO::FETCH_ASSOC);
                    
                    if (!$custom_fonts) {
                        return false;
                    }
                    
                    $font_purposes = [
                        'font_upload_1' => 'Regular Body Text Custom',
                        'font_upload_2' => 'Headings Titles Custom', 
                        'font_upload_3' => 'Formal Professional Custom',
                        'font_upload_4' => 'Decorative Fancy Custom',
                        'font_upload_5' => 'Italic Emphasis Custom'
                    ];
                    
                    $css_content = "/* Custom Fonts CSS - Auto-generated by Branding System */\n";
                    $css_content .= "/* This file is automatically updated when custom fonts are uploaded */\n\n";
                    
                    foreach ($custom_fonts as $slot => $font_path) {
                        if (!empty($font_path) && file_exists($font_path)) {
                            $filename = basename($font_path);
                            $file_ext = strtolower(pathinfo($filename, PATHINFO_EXTENSION));
                            $font_name = $font_purposes[$slot];
                            
                            // Create relative path from CSS file location to the font file
                            $relative_path = '../fonts/custom/' . $filename;
                            
                            $css_content .= "/* {$font_purposes[$slot]} */\n";
                            $css_content .= "@font-face {\n";
                            $css_content .= "    font-family: '{$font_name}';\n";
                            $css_content .= "    src: url('{$relative_path}')";
                            
                            // Add format based on file extension
                            switch ($file_ext) {
                                case 'woff2':
                                    $css_content .= " format('woff2')";
                                    break;
                                case 'woff':
                                    $css_content .= " format('woff')";
                                    break;
                                case 'ttf':
                                    $css_content .= " format('truetype')";
                                    break;
                                case 'otf':
                                    $css_content .= " format('opentype')";
                                    break;
                            }
                            
                            $css_content .= ";\n";
                            $css_content .= "    font-weight: 400;\n";
                            $css_content .= "    font-style: normal;\n";
                            $css_content .= "    font-display: swap;\n";
                            $css_content .= "}\n\n";
                        }
                    }
                    
                    $css_content .= "/* End of auto-generated custom fonts */\n";
                    
                    // Write to CSS file
                    $css_file_path = 'assets/css/custom-fonts.css';
                    $css_dir = dirname($css_file_path);
                    
                    // Create directory if it doesn't exist
                    if (!is_dir($css_dir)) {
                        mkdir($css_dir, 0755, true);
                    }
                    
                    return file_put_contents($css_file_path, $css_content) !== false;
                    
                } catch (Exception $e) {
                    echo "<p class='error'>Error generating custom fonts CSS: " . $e->getMessage() . "</p>";
                    return false;
                }
            }
        }
        
        if (generateCustomFontsCSS()) {
            echo "<p class='success'>✓ Custom fonts CSS file regenerated successfully</p>";
            
            // Show the content
            $css_file = 'assets/css/custom-fonts.css';
            if (file_exists($css_file)) {
                echo "<p><strong>CSS file content preview:</strong></p>";
                echo "<pre>" . htmlspecialchars(file_get_contents($css_file)) . "</pre>";
            }
        } else {
            echo "<p class='error'>✗ Failed to regenerate CSS file</p>";
        }
        
    } else {
        echo "<p class='error'>✗ No font files found in new location</p>";
    }
} else {
    echo "<p class='error'>✗ New font directory does not exist</p>";
}

echo "<hr>";
echo "<p><strong>Migration Summary:</strong></p>";
echo "<p>1. Font files copied from outside public_html to assets/fonts/custom/</p>";
echo "<p>2. Database paths updated to new location</p>";
echo "<p>3. CSS generation updated to use new paths</p>";
echo "<p>4. Font system now uses production-ready paths</p>";

echo "<p><a href='admin/settings/branding_settings_tabbed.php'>Test Branding Settings</a></p>";

// Add CSS for styling
echo "<style>
.success { color: green; }
.error { color: red; }
pre { background: #f5f5f5; padding: 10px; border-radius: 4px; overflow-x: auto; max-height: 300px; }
</style>";
?>
