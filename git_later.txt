Git Remote & Push Reference
===========================

Purpose: Add, verify, and use a remote for the PARENT repository (root) and understand submodule pushes.

Key Concepts
------------
Remote: Named pointer to a hosted repository URL (GitHub, GitLab, etc).
origin: Conventional default remote name.
Upstream tracking: Links your local branch to a remote branch so simple `git push` / `git pull` works.
Submodule: Independent Git repo nested inside another; each has its own remotes & commits.

Typical One‑Time Setup (Parent Repo)
------------------------------------
1. Create an empty remote repo online (avoid auto README/license if you want a clean fast‑forward push).
2. Add and verify remote:
   git remote add origin <REMOTE_URL>
   git remote -v
3. First push + set upstream:
   git push -u origin main

If Remote Already Has Commits
-----------------------------
(You created remote with a README or there is existing history.)
   git remote add origin <REMOTE_URL>
   git fetch origin
   git merge origin/main   # or: git rebase origin/main
   git push -u origin main

Adjusting Remote URL
--------------------
Change (e.g., switch HTTPS <-> SSH):
   git remote set-url origin <NEW_URL>

List / Remove Remotes
---------------------
   git remote -v
   git remote remove origin

SSH vs HTTPS
------------
HTTPS example: https://github.com/YourUser/gws-universal-hybrid-app.git
SSH example:   git@github.com:YourUser/gws-universal-hybrid-app.git
(SSH needs uploaded public key.)

Submodule Notes
---------------
Your `public_html` directory is a submodule (separate Git repo):
- Has its own remote (already configured; pushes worked there).
- Workflow:
    (Inside submodule)
    cd public_html
    # make changes
    git add ... && git commit -m "Message"
    git push
    (Back to parent) cd ..
    git add public_html        # stages the updated submodule pointer (the new commit hash)
    git commit -m "Update submodule"
    git push                   # pushes pointer (requires parent remote configured)

Verifying State
---------------
Check parent has a remote:
   git remote -v
Check submodule status (from parent root):
   git submodule status

Common Errors
-------------
"fatal: No configured push destination": No remote added yet. Fix with `git remote add origin <URL>`.
"Updates were rejected": Remote has new commits you don’t have. Run `git fetch origin` + merge or rebase, then push.

First-Time SSH Setup (Optional)
-------------------------------
   ssh-keygen -t ed25519 -C "you@example.com"
   # Add ~/.ssh/id_ed25519.pub to Git hosting service
   ssh -T git@github.com
   git remote set-url origin git@github.com:YourUser/gws-universal-hybrid-app.git

Initial Clone With Submodules
-----------------------------
   git clone --recurse-submodules <REMOTE_URL>
Or if already cloned:
   git submodule update --init --recursive

Syncing Submodules After Pull
-----------------------------
   git pull
   git submodule update --init --recursive

Force Submodule Pointer Reset (Caution)
--------------------------------------
   git submodule update --remote public_html
   git add public_html
   git commit -m "Advance submodule to latest remote"
   git push

Quick Diagnostic Checklist
--------------------------
1. git status               # Clean? Modified?
2. git remote -v            # Remote configured?
3. git branch -vv           # Upstream set?
4. git submodule status     # Submodule at expected commit?
5. git push                 # Works? If not, read error & apply above fixes.

Minimal Daily Flow
------------------
Parent only:        git add . && git commit -m "..." && git push
With submodule:
   (Inside submodule) commit & push
   (Parent)          git add public_html && git commit -m "Update submodule" && git push

That’s it. Keep this file for quick reference.
